"""Auto-generated by graphql2python."""

# pylint: disable-all
# mypy: ignore-errors

import enum
import re
import typing as _t

from pydantic import BaseModel, Field, ConfigDict

__all__ = [
    "GraphQLBaseModel",
    # scalars
    "ActionCount",
    "AreaOfEffectTypeFilter",
    "Boolean",
    "Float",
    "FloatFilter",
    "Int",
    "IntFilter",
    "LanguageScriptFilter",
    "MonsterSubtypeFilter",
    "MonsterTypeFilter",
    "ProficiencyTypeFilter",
    "SizeFilter",
    "SpellAttackTypeFilter",
    "String",
    "StringFilter",
    # enums
    "AreaOfEffectType",
    "ClassOrderBy",
    "Currency",
    "DcSuccess",
    "EquipmentCategoryOrderBy",
    "EquipmentOrderBy",
    "FeatureOrderBy",
    "LanguageOrderBy",
    "LanguageScript",
    "LanguageType",
    "LevelOrderBy",
    "MagicItemOrderBy",
    "MagicItemRarity",
    "MonsterArmorClassType",
    "MonsterOrderBy",
    "MonsterSubtype",
    "MonsterType",
    "OrderByDirection",
    "ProficiencyOrderBy",
    "ProficiencyType",
    "RaceOrderBy",
    "RestType",
    "Size",
    "SkillOrderBy",
    "SpellAttackType",
    "SpellComponent",
    "SpellOrderBy",
    "UsageType",
    "WeaponRange",
    # unions
    "ClassSpecific",
    "EquipmentMultipleItem",
    "EquipmentOption",
    "ExpertiseOption",
    "MonsterActionOption",
    "ProficiencyOption",
    "ProficiencyReference",
    "SpellPrerequisite",
    "StartingEquipmentOptionSet",
    "SubclassSpecific",
    # interfaces
    "IEquipmentBase",
    "ProficiencyRace",
    "IEquipment",
    "IGear",
    # objects
    "AbilityBonus",
    "AbilityBonusChoice",
    "AbilityBonusOption",
    "AbilityBonusOptionSet",
    "AbilityScore",
    "AbilityScorePrerequisite",
    "Action",
    "ActionDamage",
    "ActionDc",
    "ActionOption",
    "Alignment",
    "Ammunition",
    "AreaOfEffect",
    "Armor",
    "ArmorClass",
    "Attack",
    "Background",
    "BackgroundFeature",
    "BarbarianSpecific",
    "BardSpecific",
    "BreathChoice",
    "BreathOption",
    "BreathOptionSet",
    "BreathWeaponDamage",
    "BreathWeaponDc",
    "BreathWeaponTrait",
    "BreathWeaponUsage",
    "Class",
    "ClassSpellcasting",
    "ClericSpecific",
    "Condition",
    "Cost",
    "CountedReferenceOption",
    "Damage",
    "DamageAtLevel",
    "DamageOption",
    "DamageOptionSet",
    "DamageType",
    "DevotionSpecific",
    "Dice",
    "DruidSpecific",
    "EquipmentCategory",
    "EquipmentCategoryChoice",
    "EquipmentCategoryChoiceOption",
    "EquipmentCategoryOptionSet",
    "EquipmentMultipleOption",
    "EquipmentOptionSet",
    "ExpertiseChoice",
    "ExpertiseMultipleOption",
    "ExpertiseOptionSet",
    "Feat",
    "Feature",
    "FeatureChoice",
    "FeatureOption",
    "FeatureOptionSet",
    "FeaturePrerequisite",
    "FeatureSpecific",
    "FighterSpecific",
    "Gear",
    "HealingAtLevel",
    "IdealChoice",
    "IdealOption",
    "IdealOptionSet",
    "Language",
    "LanguageChoice",
    "LanguageOption",
    "LanguageOptionSet",
    "LegendaryAction",
    "Level",
    "LevelSpellcasting",
    "LoreSpecific",
    "MagicItem",
    "MagicSchool",
    "MonkSpecific",
    "Monster",
    "MonsterAction",
    "MonsterActionChoice",
    "MonsterActionOptionSet",
    "MonsterArmorClass",
    "MonsterProficiency",
    "MonsterSpeed",
    "MonsterSpell",
    "MonsterSpellSlot",
    "MonsterSpellcasting",
    "Multiclassing",
    "MultipleActionOption",
    "Pack",
    "PackQuantity",
    "PaladinSpecific",
    "PrerequisiteChoice",
    "PrerequisiteOption",
    "PrerequisiteOptionSet",
    "Proficiency",
    "ProficiencyChoice",
    "ProficiencyChoiceOption",
    "ProficiencyOptionSet",
    "ProficiencyPrerequisite",
    "ProficiencyReferenceOption",
    "Quantity",
    "Race",
    "Range",
    "RangerSpecific",
    "Reaction",
    "RogueSpecific",
    "Rule",
    "RuleSection",
    "Senses",
    "Skill",
    "SorcererSpecific",
    "SpecialAbility",
    "Speed",
    "Spell",
    "SpellChoice",
    "SpellDamage",
    "SpellDc",
    "SpellOption",
    "SpellOptionSet",
    "SpellSlotCreation",
    "SpellWithPrerequisite",
    "SpellcastingInfo",
    "StartingEquipmentChoice",
    "StringChoice",
    "StringOption",
    "StringOptionSet",
    "Subclass",
    "Subrace",
    "Tool",
    "Trait",
    "TraitChoice",
    "TraitOption",
    "TraitOptionSet",
    "TraitSpecific",
    "Usage",
    "Vehicle",
    "WarlockSpecific",
    "Weapon",
    "WeaponProperty",
    "WizardSpecific",
]


class GraphQLBaseModel(BaseModel):
    """Base Model for GraphQL object."""
    model_config = ConfigDict(populate_by_name=True)


# Int or string
ActionCount = _t.Union[int, str]

# AreaOfEffectType ("SPHERE", "CUBE", "CYLINDER", "LINE", "CONE") or list of AreaOfEffectTypes
AreaOfEffectTypeFilter = str

# The `Boolean` scalar type represents `true` or `false`.
Boolean = bool

# The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE
# 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
Float = float

# Float, list of floats, or object with gte (>=), gt (>), lte (<=), and lt (<) properties for range of values
FloatFilter = str

# The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31)
# and 2^31 - 1.
Int = int

# Int, list of ints, or object with gte (>=), gt (>), lte (<=), and lt (<) properties for range of values
IntFilter = str

# LanguageScript ("COMMON", "ELVISH", "DWARVISH", "INFERNAL", "DRACONIC", "CELESTIAL") or list of LanguageScripts
LanguageScriptFilter = str

# MonsterSubtype ("ANY_RACE", "HUMAN", "DWARF", "ELF", "GOBLINOID", "MERFOLK", "SHAPECHANGER", "DEMON", "DEVIL", "ORC",
# "SAHUAGIN", "TITAN", "KOBOLD", "GNOLL", "GRIMLOCK", "LIZARDFOLK", "GNOME") or list of MonsterSubtypes
MonsterSubtypeFilter = str

# MonsterTypes ("BEAST", "MONSTROSITY", "DRAGON", "HUMANOID", "UNDEAD", "FIEND", "CELESTIAL", "CONSTRUCT", "GIANT",
# "ELEMENTAL", "FEY", "ABERRATION", "OOZE", "SWARM", "PLANT") or list of MonsterTypes
MonsterTypeFilter = str

# ProficiencyType ("WEAPONS", "ARTISANS_TOOLS", "SKILLS", "ARMOR", "MUSICAL_INSTRUMENTS", "SAVING_THROWS", "OTHER",
# "GAMING_SETS", "VEHICLES") or list of ProficiencyTypes
ProficiencyTypeFilter = str

# Size ("TINY", "SMALL", "MEDIUM", "LARGE", "HUGE", "GARGANTUAN") or list of sizes
SizeFilter = str

# SpellAttackType ("MELEE", "RANGED") or list of SpellAttackTypes
SpellAttackTypeFilter = str

# The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most
# often used by GraphQL to represent free-form human-readable text.
String = str

# String or list of strings
StringFilter = str


def markdown_to_telegram_markdown(text: str) -> str:
    """
    Parse the input text and substitute patterns:
    - Any occurrence of `#` before a word (like `### Test`, `# Test`, `#### Test`) with `*test*`.
    - Any occurrence of `**test**` with `*test*`.

    Args:
    text (str): The input text to be parsed and substituted.

    Returns:
    str: The modified text with the substitutions made.
    """
    # Substitute patterns with '#' before a word
    text = re.sub(r'#+\s*(\w+)', r'*\1*', text)

    # Substitute '**test**' with '*test*'
    text = re.sub(r'\*\*(\w+)\*\*', r'*\1*', text)

    return text


def markdown_to_html(text: str) -> str:
    """
    Parse the input text and substitute patterns:
    - Any occurrence of `#` before a word (like `### Test`, `# Test`, `#### Test`) with `<b>test</b>`.
    - Any occurrence of `*test*`, `**test**`, `***test***`, or `****test****` with `<b>test</b>`.

    Args:
    text (str): The input text to be parsed and substituted.

    Returns:
    str: The modified text with the substitutions made.
    """
    # Substitute patterns with '#' before a word
    text = re.sub(r'#+\s*(\w+)', r'<b>\1</b>', text)

    # Substitute '*test*', '**test**', '***test***', or '****test****' with '<b>test</b>'
    text = re.sub(r'\*{1,4}(\w+.*?)\*{1,4}', r'<b>\1</b>', text)

    return text


class AreaOfEffectType(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    CONE = "CONE"
    CUBE = "CUBE"
    CYLINDER = "CYLINDER"
    LINE = "LINE"
    SPHERE = "SPHERE"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value.title()


class ClassOrderBy(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    HIT_DIE = "HIT_DIE"
    NAME = "NAME"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value


class Currency(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    CP = "CP"
    GP = "GP"
    SP = "SP"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value


class DcSuccess(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    HALF = "HALF"
    NONE = "NONE"
    OTHER = "OTHER"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value.title()


class EquipmentCategoryOrderBy(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    NAME = "NAME"
    WEIGHT = "WEIGHT"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value


class EquipmentOrderBy(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    EQUIPMENT_CATEGORY = "EQUIPMENT_CATEGORY"
    NAME = "NAME"
    WEIGHT = "WEIGHT"


class FeatureOrderBy(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    CLASS = "CLASS"
    LEVEL = "LEVEL"
    NAME = "NAME"
    SUBCLASS = "SUBCLASS"


class LanguageOrderBy(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    NAME = "NAME"
    SCRIPT = "SCRIPT"
    TYPE = "TYPE"


class LanguageScript(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    CELESTIAL = "CELESTIAL"
    COMMON = "COMMON"
    DRACONIC = "DRACONIC"
    DWARVISH = "DWARVISH"
    ELVISH = "ELVISH"
    INFERNAL = "INFERNAL"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value.title()


class LanguageType(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    EXOTIC = "EXOTIC"
    STANDARD = "STANDARD"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value.title()


class LevelOrderBy(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    ABILITY_SCORE_BONUSES = "ABILITY_SCORE_BONUSES"
    CLASS = "CLASS"
    LEVEL = "LEVEL"
    PROF_BONUS = "PROF_BONUS"
    SUBCLASS = "SUBCLASS"


class MagicItemOrderBy(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    EQUIPMENT_CATEGORY = "EQUIPMENT_CATEGORY"
    NAME = "NAME"


class MagicItemRarity(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    ARTIFACT = "ARTIFACT"
    COMMON = "COMMON"
    LEGENDARY = "LEGENDARY"
    RARE = "RARE"
    UNCOMMON = "UNCOMMON"
    VARIES = "VARIES"
    VERY_RARE = "VERY_RARE"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value.title()


class MonsterArmorClassType(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    armor = "armor"
    condition = "condition"
    dex = "dex"
    natural = "natural"
    spell = "spell"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value.title()


class MonsterOrderBy(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    ARMOR_CLASS = "ARMOR_CLASS"
    CHALLENGE_RATING = "CHALLENGE_RATING"
    CHARISMA = "CHARISMA"
    CONSTITUTION = "CONSTITUTION"
    DEXTERITY = "DEXTERITY"
    INTELLIGENCE = "INTELLIGENCE"
    NAME = "NAME"
    SIZE = "SIZE"
    STRENGTH = "STRENGTH"
    SUBTYPE = "SUBTYPE"
    TYPE = "TYPE"
    WISDOM = "WISDOM"
    XP = "XP"


class MonsterSubtype(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    ANY_RACE = "ANY_RACE"
    DEMON = "DEMON"
    DEVIL = "DEVIL"
    DWARF = "DWARF"
    ELF = "ELF"
    GNOLL = "GNOLL"
    GNOME = "GNOME"
    GOBLINOID = "GOBLINOID"
    GRIMLOCK = "GRIMLOCK"
    HUMAN = "HUMAN"
    KOBOLD = "KOBOLD"
    LIZARDFOLK = "LIZARDFOLK"
    MERFOLK = "MERFOLK"
    ORC = "ORC"
    SAHUAGIN = "SAHUAGIN"
    SHAPECHANGER = "SHAPECHANGER"
    TITAN = "TITAN"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value.title()


class MonsterType(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    ABERRATION = "ABERRATION"
    BEAST = "BEAST"
    CELESTIAL = "CELESTIAL"
    CONSTRUCT = "CONSTRUCT"
    DRAGON = "DRAGON"
    ELEMENTAL = "ELEMENTAL"
    FEY = "FEY"
    FIEND = "FIEND"
    GIANT = "GIANT"
    HUMANOID = "HUMANOID"
    MONSTROSITY = "MONSTROSITY"
    OOZE = "OOZE"
    PLANT = "PLANT"
    SWARM = "SWARM"
    UNDEAD = "UNDEAD"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value.title()


class OrderByDirection(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    ASCENDING = "ASCENDING"
    DESCENDING = "DESCENDING"


class ProficiencyOrderBy(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    NAME = "NAME"
    TYPE = "TYPE"


class ProficiencyType(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    ARMOR = "ARMOR"
    ARTISANS_TOOLS = "ARTISANS_TOOLS"
    GAMING_SETS = "GAMING_SETS"
    MUSICAL_INSTRUMENTS = "MUSICAL_INSTRUMENTS"
    OTHER = "OTHER"
    SAVING_THROWS = "SAVING_THROWS"
    SKILLS = "SKILLS"
    VEHICLES = "VEHICLES"
    WEAPONS = "WEAPONS"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value.title()


class RaceOrderBy(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    NAME = "NAME"
    SIZE = "SIZE"
    SPEED = "SPEED"


class RestType(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    LONG = "LONG"
    SHORT = "SHORT"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value.title()


class Size(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    GARGANTUAN = "GARGANTUAN"
    HUGE = "HUGE"
    LARGE = "LARGE"
    MEDIUM = "MEDIUM"
    SMALL = "SMALL"
    TINY = "TINY"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value.title()


class SkillOrderBy(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    ABILITY_SCORE = "ABILITY_SCORE"
    NAME = "NAME"


class SpellAttackType(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    MELEE = "MELEE"
    RANGED = "RANGED"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value.title()


class SpellComponent(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    M = "M"
    S = "S"
    V = "V"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value


class SpellOrderBy(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    AREA_OF_EFFECT_SIZE = "AREA_OF_EFFECT_SIZE"
    CONCENTRATION = "CONCENTRATION"
    LEVEL = "LEVEL"
    NAME = "NAME"
    RITUAL = "RITUAL"
    SCHOOL = "SCHOOL"


class UsageType(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    AT_WILL = "AT_WILL"
    PER_DAY = "PER_DAY"
    PER_REST = "PER_REST"
    RECHARGE_AFTER_REST = "RECHARGE_AFTER_REST"
    RECHARGE_ON_ROLL = "RECHARGE_ON_ROLL"

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        return self.value.title()


class WeaponRange(enum.Enum):
    """
    An Enum type
    See https://graphql.org/learn/schema/#enumeration-types
    """
    MELEE = "MELEE"
    RANGED = "RANGED"


# A Union type
# See https://graphql.org/learn/schema/#union-types
ClassSpecific = _t.Union[
    'BarbarianSpecific',
    'BardSpecific',
    'ClericSpecific',
    'DruidSpecific',
    'FighterSpecific',
    'MonkSpecific',
    'PaladinSpecific',
    'RangerSpecific',
    'RogueSpecific',
    'SorcererSpecific',
    'WarlockSpecific',
    'WizardSpecific',
]

# A Union type
# See https://graphql.org/learn/schema/#union-types
EquipmentMultipleItem = _t.Union[
    'CountedReferenceOption',
    'EquipmentCategoryChoiceOption',
]

# A Union type
# See https://graphql.org/learn/schema/#union-types
EquipmentOption = _t.Union[
    'CountedReferenceOption',
    'EquipmentCategoryChoiceOption',
    'EquipmentMultipleOption',
]

# A Union type
# See https://graphql.org/learn/schema/#union-types
ExpertiseOption = _t.Union[
    'ExpertiseMultipleOption',
    'ProficiencyChoiceOption',
    'ProficiencyReferenceOption',
]

# A Union type
# See https://graphql.org/learn/schema/#union-types
MonsterActionOption = _t.Union[
    'ActionOption',
    'MultipleActionOption',
]

# A Union type
# See https://graphql.org/learn/schema/#union-types
ProficiencyOption = _t.Union[
    'ProficiencyChoiceOption',
    'ProficiencyReferenceOption',
]

# A Union type
# See https://graphql.org/learn/schema/#union-types
ProficiencyReference = _t.Union[
    'AbilityScore',
    'Ammunition',
    'Armor',
    'EquipmentCategory',
    'Gear',
    'Pack',
    'Skill',
    'Tool',
    'Vehicle',
    'Weapon',
]

# A Union type
# See https://graphql.org/learn/schema/#union-types
SpellPrerequisite = _t.Union[
    'Feature',
    'Level',
]

# A Union type
# See https://graphql.org/learn/schema/#union-types
StartingEquipmentOptionSet = _t.Union[
    'EquipmentCategoryOptionSet',
    'EquipmentOptionSet',
]

# A Union type
# See https://graphql.org/learn/schema/#union-types
SubclassSpecific = _t.Union[
    'DevotionSpecific',
    'LoreSpecific',
]


class IEquipmentBase(GraphQLBaseModel):
    """
    An Interface type
    See https://graphql.org/learn/schema/#interfaces
    """
    desc: _t.Optional[_t.List['String']] = Field(default_factory=list)
    equipment_category: _t.Optional['EquipmentCategory'] = Field(default=None)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["IEquipmentBase"] = Field(default="IEquipmentBase", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        desc = ', '.join(self.desc) if self.desc else "None"
        equipment_category = self.equipment_category.name if self.equipment_category else "None"
        index = self.index if self.index else "None"
        name = self.name if self.name else "None"

        return (f"Description: {desc}, "
                f"Category: {equipment_category}, "
                f"Name: {name}")


class ProficiencyRace(GraphQLBaseModel):
    """
    An Interface type
    See https://graphql.org/learn/schema/#interfaces
    """
    ability_bonuses: _t.Optional[_t.List['AbilityBonus']] = Field(default_factory=list)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["ProficiencyRace"] = Field(default="ProficiencyRace", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        elements = []

        if self.name:
            elements.append(f"⚛️ <b>{self.name}</b>")
        if self.ability_bonuses:
            elements.append(f"💪 <b>Ability Bonuses</b>:\n{', '.join(map(str, self.ability_bonuses))}")
        if self.index:
            elements.append(f"🔢 <b>Index</b>: {self.index}")

        return '\n'.join(elements)


class IEquipment(IEquipmentBase):
    """
    An Interface type
    See https://graphql.org/learn/schema/#interfaces
    """
    cost: _t.Optional['Cost'] = Field(default=None)
    weight: _t.Optional['Float'] = Field(default=None)
    typename__: _t.Literal["IEquipment"] = Field(default="IEquipment", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        base_str = super().__str__()
        cost = self.cost if self.cost else "None"
        weight = self.weight if self.weight else "None"

        return f"{base_str}, Cost: {cost}, Weight: {weight}"


class IGear(IEquipment):
    """
    An Interface type
    See https://graphql.org/learn/schema/#interfaces
    """
    gear_category: _t.Optional['EquipmentCategory'] = Field(default=None)
    typename__: _t.Literal["IGear"] = Field(default="IGear", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        base_str = super().__str__()
        gear_category = self.gear_category.name if self.gear_category else "None"

        return f"{base_str}, Gear Category: {gear_category}"


class AbilityBonus(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    ability_score: _t.Optional['AbilityScore'] = Field(default=None)
    bonus: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["AbilityBonus"] = Field(default="AbilityBonus", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        elements = []

        if self.ability_score:
            elements.append(f"Ability Score: {self.ability_score}")
        if self.bonus:
            elements.append(f"Bonus: {self.bonus}")

        return '\n'.join(elements)


class AbilityBonusChoice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    from_: _t.Optional['AbilityBonusOptionSet'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["AbilityBonusChoice"] = Field(default="AbilityBonusChoice", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        choose = self.choose if self.choose is not None else "None"
        from_str = str(self.from_) if self.from_ else "None"
        type_str = self.type if self.type else "None"

        return (f"Choose: {choose}, "
                f"From: {from_str}, "
                f"Type: {type_str}")


class AbilityBonusOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    ability_score: _t.Optional['AbilityScore'] = Field(default=None)
    bonus: _t.Optional['Int'] = Field(default=None)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["AbilityBonusOption"] = Field(default="AbilityBonusOption", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        ability_score = self.ability_score.name if self.ability_score else "None"
        bonus = self.bonus if self.bonus is not None else "None"
        option_type = self.option_type if self.option_type else "None"

        return (f"Ability Score: {ability_score}, "
                f"Bonus: {bonus}, "
                f"Option Type: {option_type}")


class AbilityBonusOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_set_type: _t.Optional['String'] = Field(default=None)
    options: _t.Optional[_t.List['AbilityBonusOption']] = Field(default_factory=list)
    typename__: _t.Literal["AbilityBonusOptionSet"] = Field(default="AbilityBonusOptionSet", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        option_set_type_str = self.option_set_type if self.option_set_type else "None"
        options_str = ', '.join([str(option) for option in self.options]) if self.options else "None"

        return (f"Option Set Type: {option_set_type_str}, "
                f"Options: {options_str}")


class AbilityScore(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    desc: _t.Optional[_t.List['String']] = Field(default_factory=list)
    full_name: _t.Optional['String'] = Field(default=None)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    skills: _t.Optional[_t.List['Skill']] = Field(default_factory=list)
    typename__: _t.Literal["AbilityScore"] = Field(default="AbilityScore", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        elements = []
        if self.name:
            elements.append(f"🏷️ <b>Name</b>: {self.name}")
        if self.full_name:
            elements.append(f"🏷️ <b>Full Name</b>: {self.full_name}")
        if self.desc:
            elements.append(f"📜 <b>Description</b>: {', '.join(self.desc)}")
        if self.index:
            elements.append(f"🔢 <b>Index</b>: {self.index}")
        if self.skills:
            elements.append(f"🛠️ <b>Skills</b>: {', '.join([skill.name for skill in self.skills])}")

        return ', '.join(elements)


class AbilityScorePrerequisite(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    ability_score: _t.Optional['AbilityScore'] = Field(default=None)
    minimum_score: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["AbilityScorePrerequisite"] = Field(default="AbilityScorePrerequisite", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        ability_score = self.ability_score.name if self.ability_score else "None"
        minimum_score = self.minimum_score if self.minimum_score is not None else "None"

        return (f"Ability Score: {ability_score}, "
                f"Minimum Score: {minimum_score}")


class Action(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    action_name: _t.Optional['String'] = Field(default=None)
    count: _t.Optional['ActionCount'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["Action"] = Field(default="Action", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        action_name = self.action_name if self.action_name else "None"
        count = self.count if self.count is not None else "None"
        type_str = self.type if self.type else "None"

        return (f"🗡️ <b>Nome</b>: {action_name}, "
                f"🧮 <b>Conteggio</b>: {count}, "
                f"📜 <b>Tipo</b>: {type_str}")


class ActionDamage(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    damage_dice: _t.Optional['String'] = Field(default=None)
    damage_type: _t.Optional['DamageType'] = Field(default=None)
    dc: _t.Optional['ActionDc'] = Field(default=None)
    from_: _t.Optional['DamageOptionSet'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["ActionDamage"] = Field(default="ActionDamage", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        none_str = "None"
        choose = self.choose if self.choose is not None else none_str
        damage_dice = self.damage_dice if self.damage_dice else none_str
        damage_type = self.damage_type.name if self.damage_type else none_str
        dc = str(self.dc) if self.dc else none_str
        from_ = str(self.from_) if self.from_ else none_str
        type_str = self.type if self.type else none_str

        return_str = ''

        if choose != none_str:
            return_str += f"Scelta: {choose}, "

        if damage_dice != none_str:
            return_str += f"Dado danni: {damage_dice}, "

        if damage_type != none_str:
            return_str += f"Tipo di danno: {damage_type}, "

        if dc != none_str:
            return_str += f"CD: {dc}, "

        if from_ != none_str:
            return_str += f"From: {from_}, "

        if type_str != none_str:
            return_str += f"Type: {type_str}"

        # Strip all trailing commas, but then check if the last character is a comma.
        trimmed = return_str.rstrip(', ')
        if trimmed and trimmed[-1] == ', ':
            return trimmed[:-1]

        return trimmed


class ActionDc(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    success: _t.Optional['DcSuccess'] = Field(default=None)
    type: _t.Optional['AbilityScore'] = Field(default=None)
    value: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["ActionDc"] = Field(default="ActionDc", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        success = self.success if self.success else "Nessuna indicazione"
        type_str = self.type.name if self.type else "None"
        value = self.value if self.value is not None else "None"

        return (f"Successo: {success}, "
                f"Tipo: {type_str}, "
                f"Valore: {value}")


class ActionOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    action_name: _t.Optional['String'] = Field(default=None)
    count: _t.Optional['ActionCount'] = Field(default=None)
    option_type: _t.Optional['String'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["ActionOption"] = Field(default="ActionOption", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        action_name = self.action_name if self.action_name else "None"
        count = self.count if self.count is not None else "None"
        option_type = self.option_type if self.option_type else "None"
        type_str = self.type if self.type else "None"

        return (f"\nNome dell'azione: {action_name}, "
                f"Conteggio: {count}, "
                f"Tipo di opzione: {option_type}, "
                f"Tipo: {type_str}")


class Alignment(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    abbreviation: _t.Optional['String'] = Field(default=None)
    desc: _t.Optional['String'] = Field(default=None)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["Alignment"] = Field(default="Alignment", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        abbreviation = self.abbreviation if self.abbreviation else "None"
        desc = self.desc if self.desc else "None"
        index = self.index if self.index else "None"
        name = self.name if self.name else "None"

        return (f"Abbreviazione: {abbreviation}, "
                f"Descrizione: {desc}, "
                f"Indice: {index}, "
                f"Nome: {name}")


class Ammunition(IEquipment):
    """
    Ammunition type inheriting from IEquipment.
    """
    damage: _t.Optional['Damage'] = Field(default=None)
    range: _t.Optional['Range'] = Field(default=None)
    typename__: _t.Literal["Ammunition"] = Field(default="Ammunition", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        base_str = super().__str__()
        damage = str(self.damage) if self.damage else "None"
        range_str = str(self.range) if self.range else "None"

        return f"{base_str}, Danni: {damage}, Portata: {range_str}"


class AreaOfEffect(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    size: _t.Optional['Int'] = Field(default=None)
    type: _t.Optional['AreaOfEffectType'] = Field(default=None)
    typename__: _t.Literal["AreaOfEffect"] = Field(default="AreaOfEffect", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        size = self.size if self.size is not None else "None"
        type_str = self.type.value if self.type else "None"

        return (f"Size: {size}, "
                f"Type: {type_str}")


class Armor(IEquipment):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    armor_category: _t.Optional['EquipmentCategory'] = Field(default=None)
    armor_class: _t.Optional['ArmorClass'] = Field(default=None)
    stealth_disadvantage: _t.Optional['Boolean'] = Field(default=None)
    str_minimum: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["Armor"] = Field(default="Armor", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        base_str = super().__str__()
        armor_category = self.armor_category.name if self.armor_category else "None"
        armor_class = str(self.armor_class) if self.armor_class else "None"
        stealth_disadvantage = self.stealth_disadvantage if self.stealth_disadvantage is not None else "None"
        str_minimum = self.str_minimum if self.str_minimum is not None else "None"

        return (f"{base_str}, "
                f"Armor Category: {armor_category}, "
                f"Armor Class: {armor_class}, "
                f"Stealth Disadvantage: {stealth_disadvantage}, "
                f"Strength Minimum: {str_minimum}")


class ArmorClass(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    base: _t.Optional['Int'] = Field(default=None)
    dex_bonus: _t.Optional['Boolean'] = Field(default=None)
    max_bonus: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["ArmorClass"] = Field(default="ArmorClass", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        base = self.base if self.base is not None else "None"
        dex_bonus = self.dex_bonus if self.dex_bonus is not None else "None"
        max_bonus = self.max_bonus if self.max_bonus is not None else "0"

        return f"Base {base} {"con" if dex_bonus else "senza"} bonus destrezza. Bonus massimo di {max_bonus}"


class Attack(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    damage: _t.Optional[_t.List['Damage']] = Field(default_factory=list)
    dc: _t.Optional['ActionDc'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["Attack"] = Field(default="Attack", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        damage = ', '.join([str(d) for d in self.damage]) if self.damage else "None"
        dc = str(self.dc) if self.dc else "None"
        name = self.name if self.name else "None"

        return (f"Damage: {damage}, "
                f"DC: {dc}, "
                f"Name: {name}")


class Background(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    bonds: _t.Optional['StringChoice'] = Field(default=None)
    feature: _t.Optional['BackgroundFeature'] = Field(default=None)
    flaws: _t.Optional['StringChoice'] = Field(default=None)
    ideals: _t.Optional['IdealChoice'] = Field(default=None)
    index: _t.Optional['String'] = Field(default=None)
    language_options: _t.Optional['LanguageChoice'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    personality_traits: _t.Optional['StringChoice'] = Field(default=None)
    starting_equipment: _t.Optional[_t.List['Quantity']] = Field(default_factory=list)
    starting_equipment_options: _t.Optional[_t.List['EquipmentCategoryChoice']] = Field(default_factory=list)
    starting_proficiencies: _t.Optional[_t.List['Proficiency']] = Field(default_factory=list)
    typename__: _t.Literal["Background"] = Field(default="Background", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        bonds = str(self.bonds) if self.bonds else "None"
        feature = str(self.feature) if self.feature else "None"
        flaws = str(self.flaws) if self.flaws else "None"
        ideals = str(self.ideals) if self.ideals else "None"
        index = self.index if self.index else "None"
        language_options = str(self.language_options) if self.language_options else "None"
        name = self.name if self.name else "None"
        personality_traits = str(self.personality_traits) if self.personality_traits else "None"
        starting_equipment = ', '.join(
            [str(equip) for equip in self.starting_equipment]) if self.starting_equipment else "None"
        starting_equipment_options = ', '.join(
            [str(option) for option in self.starting_equipment_options]) if self.starting_equipment_options else "None"
        starting_proficiencies = ', '.join(
            [str(prof) for prof in self.starting_proficiencies]) if self.starting_proficiencies else "None"

        return (f"Bonds: {bonds}, Feature: {feature}, Flaws: {flaws}, Ideals: {ideals}, "
                f"Index: {index}, Language Options: {language_options}, Name: {name}, "
                f"Personality Traits: {personality_traits}, Starting Equipment: {starting_equipment}, "
                f"Starting Equipment Options: {starting_equipment_options}, Starting Proficiencies: {starting_proficiencies}")


class BackgroundFeature(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    desc: _t.Optional[_t.List['String']] = Field(default_factory=list)
    name: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["BackgroundFeature"] = Field(default="BackgroundFeature", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        desc = ', '.join(self.desc) if self.desc else "None"
        name = self.name if self.name else "None"

        return f"Description: {desc}, Name: {name}"


class BarbarianSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    brutal_critical_dice: _t.Optional['Int'] = Field(default=None)
    rage_count: _t.Optional['Int'] = Field(default=None)
    rage_damage_bonus: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["BarbarianSpecific"] = Field(default="BarbarianSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        brutal_critical_dice = self.brutal_critical_dice if self.brutal_critical_dice is not None else "None"
        rage_count = self.rage_count if self.rage_count is not None else "None"
        rage_damage_bonus = self.rage_damage_bonus if self.rage_damage_bonus is not None else "None"

        return (f"Brutal Critical Dice: {brutal_critical_dice}, Rage Count: {rage_count}, "
                f"Rage Damage Bonus: {rage_damage_bonus}")


class BardSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    bardic_inspiration_die: _t.Optional['Int'] = Field(default=None)
    magical_secrets_max_5: _t.Optional['Int'] = Field(default=None)
    magical_secrets_max_7: _t.Optional['Int'] = Field(default=None)
    magical_secrets_max_9: _t.Optional['Int'] = Field(default=None)
    song_of_rest_die: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["BardSpecific"] = Field(default="BardSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        bardic_inspiration_die = self.bardic_inspiration_die if self.bardic_inspiration_die is not None else "None"
        magical_secrets_max_5 = self.magical_secrets_max_5 if self.magical_secrets_max_5 is not None else "None"
        magical_secrets_max_7 = self.magical_secrets_max_7 if self.magical_secrets_max_7 is not None else "None"
        magical_secrets_max_9 = self.magical_secrets_max_9 if self.magical_secrets_max_9 is not None else "None"
        song_of_rest_die = self.song_of_rest_die if self.song_of_rest_die is not None else "None"

        return (f"Bardic Inspiration Die: {bardic_inspiration_die}, Magical Secrets Max 5: {magical_secrets_max_5}, "
                f"Magical Secrets Max 7: {magical_secrets_max_7}, Magical Secrets Max 9: {magical_secrets_max_9}, "
                f"Song of Rest Die: {song_of_rest_die}")


class BreathChoice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    from_: _t.Optional['BreathOptionSet'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["BreathChoice"] = Field(default="BreathChoice", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        choose = self.choose if self.choose else "None"
        from_ = str(self.from_) if self.from_ else "None"
        type_str = self.type if self.type else "None"

        return f"Choose: {choose}, From: {from_}, Type: {type_str}"


class BreathOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    damage: _t.Optional[_t.List['Damage']] = Field(default_factory=list)
    dc: _t.Optional['ActionDc'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["BreathOption"] = Field(default="BreathOption", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        damage = ', '.join([str(d) for d in self.damage]) if self.damage else "None"
        dc = str(self.dc) if self.dc else "None"
        name = self.name if self.name else "None"
        option_type = self.option_type if self.option_type else "None"

        return f"Damage: {damage}, DC: {dc}, Name: {name}, Option Type: {option_type}"


class BreathOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_set_type: _t.Optional['String'] = Field(default=None)
    options: _t.Optional[_t.List['BreathOption']] = Field(default_factory=list)
    typename__: _t.Literal["BreathOptionSet"] = Field(default="BreathOptionSet", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        option_set_type = self.option_set_type if self.option_set_type else "None"
        options = ', '.join([str(option) for option in self.options]) if self.options else "None"

        return f"Option Set Type: {option_set_type}, Options: {options}"


class BreathWeaponDamage(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    damage_at_character_level: _t.Optional[_t.List['DamageAtLevel']] = Field(default_factory=list)
    damage_type: _t.Optional['DamageType'] = Field(default=None)
    typename__: _t.Literal["BreathWeaponDamage"] = Field(default="BreathWeaponDamage", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        damage_at_character_level = ', '.join(
            [str(d) for d in self.damage_at_character_level]) if self.damage_at_character_level else "None"
        damage_type = self.damage_type.name if self.damage_type else "None"

        return f"Damage at Character Level: {damage_at_character_level}, Damage Type: {damage_type}"


class BreathWeaponDc(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    success: _t.Optional['DcSuccess'] = Field(default=None)
    type: _t.Optional['AbilityScore'] = Field(default=None)
    typename__: _t.Literal["BreathWeaponDc"] = Field(default="BreathWeaponDc", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        success = self.success if self.success else "None"
        type_str = self.type.name if self.type else "None"

        return f"Success: {success}, Type: {type_str}"


class BreathWeaponTrait(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    area_of_effect: _t.Optional['AreaOfEffect'] = Field(default=None)
    damage: _t.Optional[_t.List['BreathWeaponDamage']] = Field(default_factory=list)
    dc: _t.Optional['BreathWeaponDc'] = Field(default=None)
    desc: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    usage: _t.Optional['BreathWeaponUsage'] = Field(default=None)
    typename__: _t.Literal["BreathWeaponTrait"] = Field(default="BreathWeaponTrait", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        area_of_effect = str(self.area_of_effect) if self.area_of_effect else "None"
        damage = ', '.join([str(d) for d in self.damage]) if self.damage else "None"
        dc = str(self.dc) if self.dc else "None"
        desc = self.desc if self.desc else "None"
        name = self.name if self.name else "None"
        usage = str(self.usage) if self.usage else "None"

        return (f"Area of Effect: {area_of_effect}, Damage: {damage}, DC: {dc}, "
                f"Description: {desc}, Name: {name}, Usage: {usage}")


class BreathWeaponUsage(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    times: _t.Optional['Int'] = Field(default=None)
    type: _t.Optional['UsageType'] = Field(default=None)
    typename__: _t.Literal["BreathWeaponUsage"] = Field(default="BreathWeaponUsage", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        times = self.times if self.times is not None else "None"
        type_str = self.type if self.type else "None"

        return f"Times: {times}, Type: {type_str}"


class Class(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    class_levels: _t.Optional[_t.List['Level']] = Field(default_factory=list)
    hit_die: _t.Optional['Int'] = Field(default=None)
    index: _t.Optional['String'] = Field(default=None)
    multi_classing: _t.Optional['Multiclassing'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    proficiencies: _t.Optional[_t.List['Proficiency']] = Field(default_factory=list)
    proficiency_choices: _t.Optional[_t.List['ProficiencyChoice']] = Field(default_factory=list)
    saving_throws: _t.Optional[_t.List['AbilityScore']] = Field(default_factory=list)
    spellcasting: _t.Optional['ClassSpellcasting'] = Field(default=None)
    spells: _t.Optional[_t.List['Spell']] = Field(default_factory=list)
    starting_equipment: _t.Optional[_t.List['Quantity']] = Field(default_factory=list)
    starting_equipment_options: _t.Optional[_t.List['StartingEquipmentChoice']] = Field(default_factory=list)
    subclasses: _t.Optional[_t.List['Subclass']] = Field(default_factory=list)
    typename__: _t.Literal["Class"] = Field(default="Class", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        class_levels = ', '.join([str(level) for level in self.class_levels]) if self.class_levels else "None"
        hit_die = self.hit_die if self.hit_die is not None else "None"
        index = self.index if self.index else "None"
        multi_classing = str(self.multi_classing) if self.multi_classing else "None"
        name = self.name if self.name else "None"
        proficiencies = ', '.join([str(prof) for prof in self.proficiencies]) if self.proficiencies else "None"
        proficiency_choices = ', '.join(
            [str(choice) for choice in self.proficiency_choices]) if self.proficiency_choices else "None"
        saving_throws = ', '.join([str(st) for st in self.saving_throws]) if self.saving_throws else "None"
        spellcasting = str(self.spellcasting) if self.spellcasting else "None"
        spells = ', '.join([str(spell) for spell in self.spells]) if self.spells else "None"
        starting_equipment = ', '.join(
            [str(equip) for equip in self.starting_equipment]) if self.starting_equipment else "None"
        starting_equipment_options = ', '.join(
            [str(option) for option in self.starting_equipment_options]) if self.starting_equipment_options else "None"
        subclasses = ', '.join([str(subclass) for subclass in self.subclasses]) if self.subclasses else "None"

        return (f"Class Levels: {class_levels}, Hit Die: {hit_die}, Index: {index}, "
                f"Multi-classing: {multi_classing}, Name: {name}, Proficiencies: {proficiencies}, "
                f"Proficiency Choices: {proficiency_choices}, Saving Throws: {saving_throws}, "
                f"Spellcasting: {spellcasting}, Spells: {spells}, Starting Equipment: {starting_equipment}, "
                f"Starting Equipment Options: {starting_equipment_options}, Subclasses: {subclasses}")


class ClassSpellcasting(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    info: _t.Optional[_t.List['SpellcastingInfo']] = Field(default_factory=list)
    level: _t.Optional['Int'] = Field(default=None)
    spellcasting_ability: _t.Optional['AbilityScore'] = Field(default=None)
    typename__: _t.Literal["ClassSpellcasting"] = Field(default="ClassSpellcasting", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        info = ', '.join([str(i) for i in self.info]) if self.info else "None"
        level = self.level if self.level is not None else "None"
        spellcasting_ability = self.spellcasting_ability.name if self.spellcasting_ability else "None"

        return f"Info: {info}, Level: {level}, Spellcasting Ability: {spellcasting_ability}"


class ClericSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    channel_divinity_charges: _t.Optional['Int'] = Field(default=None)
    destroy_undead_cr: _t.Optional['Float'] = Field(default=None)
    typename__: _t.Literal["ClericSpecific"] = Field(default="ClericSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        channel_divinity_charges = self.channel_divinity_charges if self.channel_divinity_charges is not None else "None"
        destroy_undead_cr = self.destroy_undead_cr if self.destroy_undead_cr is not None else "None"

        return f"Channel Divinity Charges: {channel_divinity_charges}, Destroy Undead CR: {destroy_undead_cr}"


class Condition(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    desc: _t.Optional[_t.List['String']] = Field(default_factory=list)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["Condition"] = Field(default="Condition", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        desc = ', '.join(self.desc) if self.desc else "None"
        index = self.index if self.index else "None"
        name = self.name if self.name else "None"

        return f"Description: {desc}, Index: {index}, Name: {name}"


class Cost(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    quantity: _t.Optional['Int'] = Field(default=None)
    unit: _t.Optional['Currency'] = Field(default=None)
    typename__: _t.Literal["Cost"] = Field(default="Cost", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        quantity = self.quantity if self.quantity is not None else "None"
        unit = str(self.unit) if self.unit else "None"

        return f"Quantity: {quantity}, Unit: {unit}"


class CountedReferenceOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    count: _t.Optional['Int'] = Field(default=None)
    of: _t.Optional['IEquipment'] = Field(default=None)
    option_type: _t.Optional['String'] = Field(default=None)
    prerequisites: _t.Optional[_t.List['ProficiencyPrerequisite']] = Field(default_factory=list)
    typename__: _t.Literal["CountedReferenceOption"] = Field(default="CountedReferenceOption", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        count = self.count if self.count is not None else "None"
        of = str(self.of) if self.of else "None"
        option_type = self.option_type if self.option_type else "None"
        prerequisites = ', '.join([str(prereq) for prereq in self.prerequisites]) if self.prerequisites else "None"

        return f"Count: {count}, Of: {of}, Option Type: {option_type}, Prerequisites: {prerequisites}"


class Damage(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    damage_dice: _t.Optional['String'] = Field(default=None)
    damage_type: _t.Optional['DamageType'] = Field(default=None)
    typename__: _t.Literal["Damage"] = Field(default="Damage", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        damage_dice = self.damage_dice if self.damage_dice else "None"
        damage_type = self.damage_type.name if self.damage_type else "None"

        return (f"Damage Dice: {damage_dice}, "
                f"Damage Type: {damage_type}")


class DamageAtLevel(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    damage: _t.Optional['String'] = Field(default=None)
    level: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["DamageAtLevel"] = Field(default="DamageAtLevel", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        return f"A livello {self.level} {self.damage} di danno"


class DamageOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    damage_dice: _t.Optional['String'] = Field(default=None)
    damage_type: _t.Optional['DamageType'] = Field(default=None)
    notes: _t.Optional['String'] = Field(default=None)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["DamageOption"] = Field(default="DamageOption", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        damage_dice = self.damage_dice if self.damage_dice else "None"
        damage_type = self.damage_type.name if self.damage_type else "None"
        notes = self.notes if self.notes else "None"
        option_type = self.option_type if self.option_type else "None"

        return (f"Damage Dice: {damage_dice}, "
                f"Damage Type: {damage_type}, "
                f"Notes: {notes}, "
                f"Option Type: {option_type}")


class DamageOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_set_type: _t.Optional['String'] = Field(default=None)
    options: _t.Optional[_t.List['DamageOption']] = Field(default_factory=list)
    typename__: _t.Literal["DamageOptionSet"] = Field(default="DamageOptionSet", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        option_set_type = self.option_set_type if self.option_set_type else "None"
        options = ', '.join([str(option) for option in self.options]) if self.options else "None"

        return (f"Option Set Type: {option_set_type}, "
                f"Options: {options}")


class DamageType(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    desc: _t.Optional[_t.List['String']] = Field(default_factory=list)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["DamageType"] = Field(default="DamageType", alias="__typename")

    class DamageType(GraphQLBaseModel):
        """
        An Object type
        See https://graphql.org/learn/schema/#object-types-and-fields
        """
        desc: _t.Optional[_t.List['String']] = Field(default_factory=list)
        index: _t.Optional['String'] = Field(default=None)
        name: _t.Optional['String'] = Field(default=None)
        typename__: _t.Literal["DamageType"] = Field(default="DamageType", alias="__typename")

        def __repr__(self):
            """
            Returns a string representation of the instance, useful for debugging.
            Calls the __str__ method.
            """
            return self.__str__()

        def __str__(self):
            """
            Returns a human-readable string representation of the instance.
            """
            desc = ', '.join(self.desc) if self.desc else "None"
            index = self.index if self.index else "None"
            name = self.name if self.name else "None"

            return (f"Description: {desc}, "
                    f"Index: {index}, "
                    f"Name: {name}")


class DevotionSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    aura_range: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["DevotionSpecific"] = Field(default="DevotionSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        aura_range = self.aura_range if self.aura_range is not None else "None"

        return f"Aura Range: {aura_range}"


class Dice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    dice_count: _t.Optional['Int'] = Field(default=None)
    dice_value: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["Dice"] = Field(default="Dice", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        dice_count = self.dice_count if self.dice_count is not None else "None"
        dice_value = self.dice_value if self.dice_value is not None else "None"

        return f"Dice Count: {dice_count}, Dice Value: {dice_value}"


class DruidSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    wild_shape_fly: _t.Optional['Boolean'] = Field(default=None)
    wild_shape_max_cr: _t.Optional['Float'] = Field(default=None)
    wild_shape_swim: _t.Optional['Boolean'] = Field(default=None)
    typename__: _t.Literal["DruidSpecific"] = Field(default="DruidSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        wild_shape_fly = self.wild_shape_fly if self.wild_shape_fly is not None else "None"
        wild_shape_max_cr = self.wild_shape_max_cr if self.wild_shape_max_cr is not None else "None"
        wild_shape_swim = self.wild_shape_swim if self.wild_shape_swim is not None else "None"

        return (f"Wild Shape Fly: {wild_shape_fly}, Wild Shape Max CR: {wild_shape_max_cr}, "
                f"Wild Shape Swim: {wild_shape_swim}")


class EquipmentCategory(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    equipment: _t.Optional[_t.List['IEquipmentBase']] = Field(default_factory=list)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["EquipmentCategory"] = Field(default="EquipmentCategory", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        equipment_list = ', '.join([eq.name for eq in self.equipment]) if self.equipment else "None"
        index = self.index if self.index else "None"
        name = self.name if self.name else "None"

        return (f"Equipment: {equipment_list}, "
                f"Index: {index}, "
                f"Name: {name}")


class EquipmentCategoryChoice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    from_: _t.Optional['EquipmentCategoryOptionSet'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["EquipmentCategoryChoice"] = Field(default="EquipmentCategoryChoice", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        choose = self.choose if self.choose else "None"
        from_ = str(self.from_) if self.from_ else "None"
        type_str = self.type if self.type else "None"

        return f"Choose: {choose}, From: {from_}, Type: {type_str}"


class EquipmentCategoryChoiceOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choice: _t.Optional['EquipmentCategoryChoice'] = Field(default=None)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["EquipmentCategoryChoiceOption"] = Field(default="EquipmentCategoryChoiceOption",
                                                                    alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        choice = str(self.choice) if self.choice else "None"
        option_type = self.option_type if self.option_type else "None"

        return f"Choice: {choice}, Option Type: {option_type}"


class EquipmentCategoryOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    equipment_category: _t.Optional['EquipmentCategory'] = Field(default=None)
    option_set_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["EquipmentCategoryOptionSet"] = Field(default="EquipmentCategoryOptionSet",
                                                                 alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        equipment_category = str(self.equipment_category) if self.equipment_category else "None"
        option_set_type = self.option_set_type if self.option_set_type else "None"

        return f"Equipment Category: {equipment_category}, Option Set Type: {option_set_type}"


class EquipmentMultipleOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    items: _t.Optional[_t.List['EquipmentMultipleItem']] = Field(default_factory=list)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["EquipmentMultipleOption"] = Field(default="EquipmentMultipleOption", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        items = ', '.join([str(item) for item in self.items]) if self.items else "None"
        option_type = self.option_type if self.option_type else "None"

        return f"Items: {items}, Option Type: {option_type}"


class EquipmentOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_set_type: _t.Optional['String'] = Field(default=None)
    options: _t.Optional[_t.List['EquipmentOption']] = Field(default_factory=list)
    typename__: _t.Literal["EquipmentOptionSet"] = Field(default="EquipmentOptionSet", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        option_set_type = self.option_set_type if self.option_set_type else "None"
        options = ', '.join([str(option) for option in self.options]) if self.options else "None"

        return f"Option Set Type: {option_set_type}, Options: {options}"


class ExpertiseChoice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    from_: _t.Optional['ExpertiseOptionSet'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["ExpertiseChoice"] = Field(default="ExpertiseChoice", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        choose = self.choose if self.choose else "None"
        from_ = str(self.from_) if self.from_ else "None"
        type_str = self.type if self.type else "None"

        return f"Choose: {choose}, From: {from_}, Type: {type_str}"


class ExpertiseMultipleOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    items: _t.Optional[_t.List['ProficiencyOption']] = Field(default_factory=list)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["ExpertiseMultipleOption"] = Field(default="ExpertiseMultipleOption", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        items = ', '.join([str(item) for item in self.items]) if self.items else "None"
        option_type = self.option_type if self.option_type else "None"

        return f"Items: {items}, Option Type: {option_type}"


class ExpertiseOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_set_type: _t.Optional['String'] = Field(default=None)
    options: _t.Optional[_t.List['ExpertiseOption']] = Field(default_factory=list)
    typename__: _t.Literal["ExpertiseOptionSet"] = Field(default="ExpertiseOptionSet", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        option_set_type = self.option_set_type if self.option_set_type else "None"
        options = ', '.join([str(option) for option in self.options]) if self.options else "None"

        return f"Option Set Type: {option_set_type}, Options: {options}"


class Feat(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    desc: _t.Optional[_t.List['String']] = Field(default_factory=list)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    prerequisites: _t.Optional[_t.List['AbilityScorePrerequisite']] = Field(default_factory=list)
    typename__: _t.Literal["Feat"] = Field(default="Feat", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        desc = ', '.join(self.desc) if self.desc else "None"
        index = self.index if self.index else "None"
        name = self.name if self.name else "None"
        prerequisites = ', '.join([str(prereq) for prereq in self.prerequisites]) if self.prerequisites else "None"

        return f"Description: {desc}, Index: {index}, Name: {name}, Prerequisites: {prerequisites}"


class Feature(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    class_: _t.Optional['Class'] = Field(default=None)
    desc: _t.Optional[_t.List['String']] = Field(default_factory=list)
    feature_specific: _t.Optional['FeatureSpecific'] = Field(default=None)
    index: _t.Optional['String'] = Field(default=None)
    level: _t.Optional['Int'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    parent: _t.Optional['Feature'] = Field(default=None)
    prerequisites: _t.Optional[_t.List['FeaturePrerequisite']] = Field(default_factory=list)
    reference: _t.Optional['String'] = Field(default=None)
    subclass: _t.Optional['Subclass'] = Field(default=None)
    typename__: _t.Literal["Feature"] = Field(default="Feature", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        class_ = str(self.class_) if self.class_ else "None"
        desc = ', '.join(self.desc) if self.desc else "None"
        feature_specific = str(self.feature_specific) if self.feature_specific else "None"
        index = self.index if self.index else "None"
        level = self.level if self.level is not None else "None"
        name = self.name if self.name else "None"
        parent = str(self.parent) if self.parent else "None"
        prerequisites = ', '.join([str(prereq) for prereq in self.prerequisites]) if self.prerequisites else "None"
        reference = self.reference if self.reference else "None"
        subclass = str(self.subclass) if self.subclass else "None"

        return (f"Class: {class_}, Description: {desc}, Feature Specific: {feature_specific}, Index: {index}, "
                f"Level: {level}, Name: {name}, Parent: {parent}, Prerequisites: {prerequisites}, "
                f"Reference: {reference}, Subclass: {subclass}")


class FeatureChoice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    from_: _t.Optional['FeatureOptionSet'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["FeatureChoice"] = Field(default="FeatureChoice", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        choose = self.choose if self.choose else "None"
        from_ = str(self.from_) if self.from_ else "None"
        type = self.type if self.type else "None"

        return f"Choose: {choose}, From: {from_}, Type: {type}"


class FeatureOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    item: _t.Optional['Feature'] = Field(default=None)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["FeatureOption"] = Field(default="FeatureOption", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        item = str(self.item) if self.item else "None"
        option_type = self.option_type if self.option_type else "None"

        return f"Item: {item}, Option Type: {option_type}"


class FeatureOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_set_type: _t.Optional['String'] = Field(default=None)
    options: _t.Optional[_t.List['FeatureOption']] = Field(default_factory=list)
    typename__: _t.Literal["FeatureOptionSet"] = Field(default="FeatureOptionSet", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        option_set_type = self.option_set_type if self.option_set_type else "None"
        options = ', '.join([str(option) for option in self.options]) if self.options else "None"

        return f"Option Set Type: {option_set_type}, Options: {options}"


class FeaturePrerequisite(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    feature: _t.Optional['Feature'] = Field(default=None)
    level: _t.Optional['Int'] = Field(default=None)
    spell: _t.Optional['Spell'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["FeaturePrerequisite"] = Field(default="FeaturePrerequisite", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        feature = str(self.feature) if self.feature else "None"
        level = self.level if self.level is not None else "None"
        spell = str(self.spell) if self.spell else "None"
        type = self.type if self.type else "None"

        return f"Feature: {feature}, Level: {level}, Spell: {spell}, Type: {type}"


class FeatureSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    expertise_options: _t.Optional['ExpertiseChoice'] = Field(default=None)
    invocations: _t.Optional[_t.List['Feature']] = Field(default_factory=list)
    subfeature_options: _t.Optional['FeatureChoice'] = Field(default=None)
    typename__: _t.Literal["FeatureSpecific"] = Field(default="FeatureSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        expertise_options = str(self.expertise_options) if self.expertise_options else "None"
        invocations = ', '.join([str(invocation) for invocation in self.invocations]) if self.invocations else "None"
        subfeature_options = str(self.subfeature_options) if self.subfeature_options else "None"

        return (
            f"Expertise Options: {expertise_options}, Invocations: {invocations}, Subfeature Options: {subfeature_options}")


class FighterSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    action_surges: _t.Optional['Int'] = Field(default=None)
    extra_attacks: _t.Optional['Int'] = Field(default=None)
    indomitable_uses: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["FighterSpecific"] = Field(default="FighterSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        action_surges = self.action_surges if self.action_surges is not None else "None"
        extra_attacks = self.extra_attacks if self.extra_attacks is not None else "None"
        indomitable_uses = self.indomitable_uses if self.indomitable_uses is not None else "None"

        return (f"Action Surges: {action_surges}, Extra Attacks: {extra_attacks}, "
                f"Indomitable Uses: {indomitable_uses}")


class Gear(
    IGear
):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    typename__: _t.Literal["Gear"] = Field(default="Gear", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        return super().__str__()


class HealingAtLevel(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    healing: _t.Optional['String'] = Field(default=None)
    level: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["HealingAtLevel"] = Field(default="HealingAtLevel", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        elements = []
        if self.healing:
            elements.append(f"🩹 <b>Healing:</b> {self.healing}")
        if self.level is not None:
            elements.append(f"🎚️ <b>Level:</b> {self.level}")

        return '\n'.join(elements)


class IdealChoice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    from_: _t.Optional['IdealOptionSet'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["IdealChoice"] = Field(default="IdealChoice", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        choose = self.choose if self.choose else "None"
        from_ = str(self.from_) if self.from_ else "None"
        type_str = self.type if self.type else "None"

        return f"Choose: {choose}, From: {from_}, Type: {type_str}"


class IdealOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    alignments: _t.Optional[_t.List['Alignment']] = Field(default_factory=list)
    desc: _t.Optional['String'] = Field(default=None)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["IdealOption"] = Field(default="IdealOption", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        alignments = ', '.join([str(alignment) for alignment in self.alignments]) if self.alignments else "None"
        desc = self.desc if self.desc else "None"
        option_type = self.option_type if self.option_type else "None"

        return f"Alignments: {alignments}, Description: {desc}, Option Type: {option_type}"


class IdealOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_set_type: _t.Optional['String'] = Field(default=None)
    options: _t.Optional[_t.List['IdealOption']] = Field(default_factory=list)
    typename__: _t.Literal["IdealOptionSet"] = Field(default="IdealOptionSet", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        option_set_type = self.option_set_type if self.option_set_type else "None"
        options = ', '.join([str(option) for option in self.options]) if self.options else "None"

        return f"Option Set Type: {option_set_type}, Options: {options}"


class Language(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    desc: _t.Optional['String'] = Field(default=None)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    script: _t.Optional['LanguageScript'] = Field(default=None)
    type: _t.Optional['LanguageType'] = Field(default=None)
    typical_speakers: _t.Optional[_t.List['String']] = Field(default_factory=list)
    typename__: _t.Literal["Language"] = Field(default="Language", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        desc = self.desc if self.desc else "None"
        index = self.index if self.index else "None"
        name = self.name if self.name else "None"
        script = str(self.script) if self.script else "None"
        type_str = str(self.type) if self.type else "None"
        typical_speakers = ', '.join(self.typical_speakers) if self.typical_speakers else "None"

        return (f"Description: {desc}, Index: {index}, Name: {name}, Script: {script}, "
                f"Type: {type_str}, Typical Speakers: {typical_speakers}")


class LanguageChoice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    from_: _t.Optional['LanguageOptionSet'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["LanguageChoice"] = Field(default="LanguageChoice", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        choose = self.choose if self.choose else "None"
        from_ = str(self.from_) if self.from_ else "None"
        type_str = self.type if self.type else "None"

        return f"Choose: {choose}, From: {from_}, Type: {type_str}"


class LanguageOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    item: _t.Optional['Language'] = Field(default=None)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["LanguageOption"] = Field(default="LanguageOption", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        item = str(self.item) if self.item else "None"
        option_type = self.option_type if self.option_type else "None"

        return f"Item: {item}, Option Type: {option_type}"


class LanguageOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_set_type: _t.Optional['String'] = Field(default=None)
    options: _t.Optional[_t.List['LanguageOption']] = Field(default_factory=list)
    typename__: _t.Literal["LanguageOptionSet"] = Field(default="LanguageOptionSet", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        option_set_type = self.option_set_type if self.option_set_type else "None"
        options = ', '.join([str(option) for option in self.options]) if self.options else "None"

        return f"Option Set Type: {option_set_type}, Options: {options}"


class LegendaryAction(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    damage: _t.Optional[_t.List['Damage']] = Field(default_factory=list)
    dc: _t.Optional['ActionDc'] = Field(default=None)
    desc: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["LegendaryAction"] = Field(default="LegendaryAction", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        damage = ', '.join([str(d) for d in self.damage]) if self.damage else "None"
        dc = str(self.dc) if self.dc else "None"
        desc = self.desc if self.desc else "None"
        name = self.name if self.name else "None"

        return f"Damage: {damage}, DC: {dc}, Description: {desc}, Name: {name}"


class Level(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    ability_score_bonuses: _t.Optional['Int'] = Field(default=None)
    class_: _t.Optional['Class'] = Field(default=None)
    class_specific: _t.Optional['ClassSpecific'] = Field(default=None)
    features: _t.Optional[_t.List['Feature']] = Field(default_factory=list)
    index: _t.Optional['String'] = Field(default=None)
    level: _t.Optional['Int'] = Field(default=None)
    prof_bonus: _t.Optional['Int'] = Field(default=None)
    spellcasting: _t.Optional['LevelSpellcasting'] = Field(default=None)
    subclass: _t.Optional['Subclass'] = Field(default=None)
    subclass_specific: _t.Optional['SubclassSpecific'] = Field(default=None)
    typename__: _t.Literal["Level"] = Field(default="Level", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        ability_score_bonuses = self.ability_score_bonuses if self.ability_score_bonuses is not None else "None"
        class_ = str(self.class_) if self.class_ else "None"
        class_specific = str(self.class_specific) if self.class_specific else "None"
        features = ', '.join([str(feature) for feature in self.features]) if self.features else "None"
        index = self.index if self.index else "None"
        level = self.level if self.level is not None else "None"
        prof_bonus = self.prof_bonus if self.prof_bonus is not None else "None"
        spellcasting = str(self.spellcasting) if self.spellcasting else "None"
        subclass = str(self.subclass) if self.subclass else "None"
        subclass_specific = str(self.subclass_specific) if self.subclass_specific else "None"

        return (f"Ability Score Bonuses: {ability_score_bonuses}, Class: {class_}, Class Specific: {class_specific}, "
                f"Features: {features}, Index: {index}, Level: {level}, Proficiency Bonus: {prof_bonus}, "
                f"Spellcasting: {spellcasting}, Subclass: {subclass}, Subclass Specific: {subclass_specific}")


class LevelSpellcasting(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    cantrips_known: _t.Optional['Int'] = Field(default=None)
    spell_slots_level_1: _t.Optional['Int'] = Field(default=None)
    spell_slots_level_2: _t.Optional['Int'] = Field(default=None)
    spell_slots_level_3: _t.Optional['Int'] = Field(default=None)
    spell_slots_level_4: _t.Optional['Int'] = Field(default=None)
    spell_slots_level_5: _t.Optional['Int'] = Field(default=None)
    spell_slots_level_6: _t.Optional['Int'] = Field(default=None)
    spell_slots_level_7: _t.Optional['Int'] = Field(default=None)
    spell_slots_level_8: _t.Optional['Int'] = Field(default=None)
    spell_slots_level_9: _t.Optional['Int'] = Field(default=None)
    spells_known: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["LevelSpellcasting"] = Field(default="LevelSpellcasting", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        cantrips_known = self.cantrips_known if self.cantrips_known is not None else "None"
        spell_slots_level_1 = self.spell_slots_level_1 if self.spell_slots_level_1 is not None else "None"
        spell_slots_level_2 = self.spell_slots_level_2 if self.spell_slots_level_2 is not None else "None"
        spell_slots_level_3 = self.spell_slots_level_3 if self.spell_slots_level_3 is not None else "None"
        spell_slots_level_4 = self.spell_slots_level_4 if self.spell_slots_level_4 is not None else "None"
        spell_slots_level_5 = self.spell_slots_level_5 if self.spell_slots_level_5 is not None else "None"
        spell_slots_level_6 = self.spell_slots_level_6 if self.spell_slots_level_6 is not None else "None"
        spell_slots_level_7 = self.spell_slots_level_7 if self.spell_slots_level_7 is not None else "None"
        spell_slots_level_8 = self.spell_slots_level_8 if self.spell_slots_level_8 is not None else "None"
        spell_slots_level_9 = self.spell_slots_level_9 if self.spell_slots_level_9 is not None else "None"
        spells_known = self.spells_known if self.spells_known is not None else "None"

        return (f"Cantrips Known: {cantrips_known}, Spell Slots Level 1: {spell_slots_level_1}, "
                f"Spell Slots Level 2: {spell_slots_level_2}, Spell Slots Level 3: {spell_slots_level_3}, "
                f"Spell Slots Level 4: {spell_slots_level_4}, Spell Slots Level 5: {spell_slots_level_5}, "
                f"Spell Slots Level 6: {spell_slots_level_6}, Spell Slots Level 7: {spell_slots_level_7}, "
                f"Spell Slots Level 8: {spell_slots_level_8}, Spell Slots Level 9: {spell_slots_level_9}, "
                f"Spells Known: {spells_known}")


class LoreSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    additional_magical_secrets_max_lvl: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["LoreSpecific"] = Field(default="LoreSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        additional_magical_secrets_max_lvl = self.additional_magical_secrets_max_lvl if self.additional_magical_secrets_max_lvl is not None else "None"

        return f"Additional Magical Secrets Max Level: {additional_magical_secrets_max_lvl}"


class MagicItem(
    IEquipmentBase,
):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    rarity: _t.Optional['MagicItemRarity'] = Field(default=None)
    typename__: _t.Literal["MagicItem"] = Field(default="MagicItem", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        base_str = super().__str__()
        rarity = str(self.rarity) if self.rarity else "None"

        return f"{base_str}, Rarity: {rarity}"


class MagicSchool(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    desc: _t.Optional['String'] = Field(default=None)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    spells: _t.Optional[_t.List['Spell']] = Field(default_factory=list)
    typename__: _t.Literal["MagicSchool"] = Field(default="MagicSchool", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        desc = self.desc if self.desc else "None"
        index = self.index if self.index else "None"
        name = self.name if self.name else "None"
        spells = ', '.join([str(spell) for spell in self.spells]) if self.spells else "None"

        return f"Description: {desc}, Index: {index}, Name: {name}, Spells: {spells}"


class MonkSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    ki_points: _t.Optional['Int'] = Field(default=None)
    martial_arts: _t.Optional['Dice'] = Field(default=None)
    unarmored_movement: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["MonkSpecific"] = Field(default="MonkSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        ki_points = self.ki_points if self.ki_points is not None else "None"
        martial_arts = str(self.martial_arts) if self.martial_arts else "None"
        unarmored_movement = self.unarmored_movement if self.unarmored_movement is not None else "None"

        return f"Ki Points: {ki_points}, Martial Arts: {martial_arts}, Unarmored Movement: {unarmored_movement}"


class Monster(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    actions: _t.Optional[_t.List['MonsterAction']] = Field(default_factory=list)
    alignment: _t.Optional['String'] = Field(default=None)
    armor_class: _t.Optional[_t.List[_t.Optional['MonsterArmorClass']]] = Field(default_factory=list)
    challenge_rating: _t.Optional['Float'] = Field(default=None)
    charisma: _t.Optional['Int'] = Field(default=None)
    condition_immunities: _t.Optional[_t.List['Condition']] = Field(default_factory=list)
    constitution: _t.Optional['Int'] = Field(default=None)
    damage_immunities: _t.Optional[_t.List['String']] = Field(default_factory=list)
    damage_resistances: _t.Optional[_t.List['String']] = Field(default_factory=list)
    damage_vulnerabilities: _t.Optional[_t.List['String']] = Field(default_factory=list)
    desc: _t.Optional['String'] = Field(default=None)
    dexterity: _t.Optional['Int'] = Field(default=None)
    forms: _t.Optional[_t.List['Monster']] = Field(default_factory=list)
    hit_dice: _t.Optional['String'] = Field(default=None)
    hit_points: _t.Optional['Int'] = Field(default=None)
    hit_points_roll: _t.Optional['String'] = Field(default=None)
    image: _t.Optional['String'] = Field(default=None)
    index: _t.Optional['String'] = Field(default=None)
    intelligence: _t.Optional['Int'] = Field(default=None)
    languages: _t.Optional['String'] = Field(default=None)
    legendary_actions: _t.Optional[_t.List['LegendaryAction']] = Field(default_factory=list)
    name: _t.Optional['String'] = Field(default=None)
    proficiencies: _t.Optional[_t.List['MonsterProficiency']] = Field(default_factory=list)
    proficiency_bonus: _t.Optional['Int'] = Field(default=None)
    reactions: _t.Optional[_t.List['Reaction']] = Field(default_factory=list)
    senses: _t.Optional['Senses'] = Field(default=None)
    size: _t.Optional['Size'] = Field(default=None)
    special_abilities: _t.Optional[_t.List['SpecialAbility']] = Field(default_factory=list)
    speed: _t.Optional['MonsterSpeed'] = Field(default=None)
    strength: _t.Optional['Int'] = Field(default=None)
    subtype: _t.Optional['MonsterSubtype'] = Field(default=None)
    type: _t.Optional['MonsterType'] = Field(default=None)
    wisdom: _t.Optional['Int'] = Field(default=None)
    xp: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["Monster"] = Field(default="Monster", alias="__typename")

    def __repr__(self):
        self.__str__()

    def __str__(self):
        actions_str = "\n\n".join([f'Azione {i + 1})\n{str(action)}' for i, action in enumerate((self.actions or []))])
        armor_class_str = "\n".join([str(ac) for ac in (self.armor_class or [])])
        condition_immunities_str = ", ".join([ci.name for ci in (self.condition_immunities or [])])
        damage_immunities_str = ", ".join(self.damage_immunities or [])
        damage_resistances_str = ", ".join(self.damage_resistances or [])
        damage_vulnerabilities_str = ", ".join(self.damage_vulnerabilities or [])
        forms_str = "\n".join([str(form) for form in (self.forms or [])])
        legendary_actions_str = "\n".join([str(la) for la in (self.legendary_actions or [])])
        proficiencies_str = ", ".join([f"{prof.proficiency.name}: {prof.value}" for prof in (self.proficiencies or [])])
        reactions_str = "\n".join([str(reaction) for reaction in (self.reactions or [])])
        special_abilities_str = "\n".join([str(sa) for sa in (self.special_abilities or [])])
        speed_str = str(self.speed) if self.speed else "Non ha velocità"

        return (f"🧟‍♂️ <b>Nome</b>: {self.name}\n\n"
                f"⚔️ <b>Azioni del mostro</b>:\n{actions_str}\n\n"
                f"⚖️ <b>Allineamento</b>: {self.alignment}\n"
                f"🛡️ <b>Classe Armatura</b>:\n{armor_class_str}\n"
                f"🎲 <b>Valutazione della sfida</b>: {self.challenge_rating}\n"
                f"🗣️ <b>Carisma</b>: {self.charisma}\n"
                f"🛡️ <b>Condizioni di immunità</b>: {condition_immunities_str}\n"
                f"💪 <b>Costituzione</b>: {self.constitution}\n"
                f"🔥 <b>Immunità ai danni</b>: {damage_immunities_str}\n"
                f"🛡️ <b>Resistenze ai danni</b>: {damage_resistances_str}\n"
                f"⚠️ <b>Vulnerabilità dei danni</b>: {damage_vulnerabilities_str}\n"
                f"📜 <b>Descrizione</b>: {self.desc}\n"
                f"🤸‍♂️ <b>Destrezza</b>: {self.dexterity}\n"
                f"🐉 <b>Forme</b>:\n{forms_str}\n"
                f"🧮 <b>Dadi ferita</b>: {self.hit_dice}\n"
                f"❤️ <b>Punti ferita</b>: {self.hit_points} ({self.hit_points_roll})\n"
                f"🧠 <b>Intelligenza</b>: {self.intelligence}\n"
                f"🗣️ <b>Lingue</b>: {self.languages}\n"
                f"👑 <b>Azioni leggendarie</b>:\n{legendary_actions_str}\n"
                f"📜 <b>Competenze</b>: {proficiencies_str}\n"
                f"⭐ <b>Bonus di competenza</b>: {self.proficiency_bonus}\n"
                f"⚡ <b>Reazioni</b>:\n{reactions_str}\n"
                f"👀 <b>Sensi</b>: {self.senses}\n"
                f"📏 <b>Dimensione</b>: {self.size}\n"
                f"✨ <b>Abilità speciali</b>:\n{special_abilities_str}\n\n"
                f"🏃 <b>Velocità</b>: {speed_str}\n"
                f"💪 <b>La forza</b>: {self.strength}\n"
                f"🔹 <b>Sottotipo</b>: {self.subtype}\n"
                f"🔸 <b>Tipo</b>: {self.type}\n"
                f"🧠 <b>Saggezza</b>: {self.wisdom}\n"
                f"⭐ <b>XP</b>: {self.xp}")


class MonsterAction(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    action_options: _t.Optional['MonsterActionChoice'] = Field(default=None)
    actions: _t.Optional[_t.List['Action']] = Field(default_factory=list)
    attack_bonus: _t.Optional['Int'] = Field(default=None)
    attacks: _t.Optional[_t.List['Attack']] = Field(default_factory=list)
    damage: _t.Optional[_t.List['ActionDamage']] = Field(default_factory=list)
    dc: _t.Optional['ActionDc'] = Field(default=None)
    desc: _t.Optional['String'] = Field(default=None)
    multiattack_type: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    options: _t.Optional['BreathChoice'] = Field(default=None)
    usage: _t.Optional['Usage'] = Field(default=None)
    typename__: _t.Literal["MonsterAction"] = Field(default="MonsterAction", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        action_options = str(self.action_options) if self.action_options else "Non ci sono opzioni di azione"
        actions = '\n'.join([str(action) for action in self.actions]) if self.actions else "Non ci sono azioni"
        attack_bonus = self.attack_bonus if self.attack_bonus is not None else "Non ci sono attacchi bonus"
        attacks = ', '.join([str(attack) for attack in self.attacks]) if self.attacks else "Non ci sono attacchi"
        damage = '\n'.join([str(d) for d in self.damage]) if self.damage else "Non ci sono danni"
        dc = str(self.dc) if self.dc else "Non ha classe difficoltà"
        desc = self.desc if self.desc else "L'azione del mostro non ha descrizione"
        multiattack_type = self.multiattack_type if self.multiattack_type else "Non c'è un tipo di multiattacco"
        name = self.name if self.name else "L'azione del mostro non ha un nome"
        options = str(self.options) if self.options else "L'azione del mostro non ha opzioni"
        usage = str(self.usage) if self.usage else "L'azione del mostro non ha utilizzi"

        return (f"\t🗡️ <b>Nome</b>: {name}\n"
                f"\t⚔️ <b>Azioni</b>:\n{actions}\n"
                f"\t⚙️ <b>Opzioni di azione</b>: {action_options}\n"
                f"\t🎯 <b>Bonus d'attacco</b>: {attack_bonus}\n"
                f"\t🗡️ <b>Attacchi</b>: {attacks}\n"
                f"\t💥 <b>Danni</b>:\n{damage}\n"
                f"\t🎲 <b>CD</b>: {dc}\n"
                f"\t📝 <b>Descrizione</b>: {desc}\n"
                f"\t⚔️ <b>Tipo di attacco multiplo</b>: {multiattack_type}\n"
                f"\t🗡️ <b>Opzioni</b>: {options}\n"
                f"\t⚡ <b>Utilizzo</b>: {usage}")


class MonsterActionChoice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    from_: _t.Optional['MonsterActionOptionSet'] = Field(default=None, alias='from')
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["MonsterActionChoice"] = Field(default="MonsterActionChoice", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        choose = self.choose if self.choose else "Nessuna scelta"
        from_ = str(self.from_) if self.from_ else "None"
        type_str = self.type if self.type else "None"

        return f"Scelte: {choose}\n{from_}\nTipo: {type_str}"


class MonsterActionOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_set_type: _t.Optional['String'] = Field(default=None)
    options: _t.Optional[_t.List['MonsterActionOption']] = Field(default_factory=list)
    typename__: _t.Literal["MonsterActionOptionSet"] = Field(default="MonsterActionOptionSet", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        option_set_type = self.option_set_type if self.option_set_type else "None"
        options = '\n'.join([str(option) for option in self.options]) if self.options else "None"

        return options


class MonsterArmorClass(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    armor: _t.Optional[_t.List[_t.Optional['Armor']]] = Field(default_factory=list)
    condition: _t.Optional['Condition'] = Field(default=None)
    desc: _t.Optional['String'] = Field(default=None)
    spell: _t.Optional['Spell'] = Field(default=None)
    type: _t.Optional['MonsterArmorClassType'] = Field(default=None)
    value: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["MonsterArmorClass"] = Field(default="MonsterArmorClass", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        armor = ', '.join([str(a) for a in self.armor]) if self.armor else "Nessuna armatura particolare"
        condition = str(self.condition) if self.condition else "Nessuna condizione"
        desc = self.desc if self.desc else "Nessuna descrizione"
        spell = str(self.spell) if self.spell else "Nessuna spell"
        type_str = str(self.type) if self.type else "Nessun tipo"
        value = self.value if self.value is not None else "None"

        return (f"Armor:\n{armor}, Condition: {condition}, Description: {desc}, Spell: {spell}, "
                f"Type: {type_str}, Value: {value}")


class MonsterProficiency(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    proficiency: _t.Optional['Proficiency'] = Field(default=None)
    value: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["MonsterProficiency"] = Field(default="MonsterProficiency", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        proficiency = str(self.proficiency) if self.proficiency else "None"
        value = self.value if self.value is not None else "None"

        return f"Proficiency: {proficiency}, Value: {value}"


class MonsterSpeed(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    burrow: _t.Optional['String'] = Field(default=None)
    climb: _t.Optional['String'] = Field(default=None)
    fly: _t.Optional['String'] = Field(default=None)
    hover: _t.Optional['Boolean'] = Field(default=None)
    swim: _t.Optional['String'] = Field(default=None)
    walk: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["MonsterSpeed"] = Field(default="MonsterSpeed", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        burrow = self.burrow if self.burrow else "None"
        climb = self.climb if self.climb else "None"
        fly = self.fly if self.fly else "None"
        hover = self.hover if self.hover is not None else "None"
        swim = self.swim if self.swim else "None"
        walk = self.walk if self.walk else "None"

        return f"Burrow: {burrow}, Climb: {climb}, Fly: {fly}, Hover: {hover}, Swim: {swim}, Walk: {walk}"


class MonsterSpell(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    spell: _t.Optional['Spell'] = Field(default=None)
    usage: _t.Optional['Usage'] = Field(default=None)
    typename__: _t.Literal["MonsterSpell"] = Field(default="MonsterSpell", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        spell = str(self.spell) if self.spell else "None"
        usage = str(self.usage) if self.usage else "None"

        return f"Spell: {spell}, Usage: {usage}"


class MonsterSpellSlot(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    level: _t.Optional['Int'] = Field(default=None)
    slots: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["MonsterSpellSlot"] = Field(default="MonsterSpellSlot", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        level = self.level if self.level is not None else "None"
        slots = self.slots if self.slots is not None else "None"

        return f"Level: {level}, Slots: {slots}"


class MonsterSpellcasting(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    ability: _t.Optional['AbilityScore'] = Field(default=None)
    components_required: _t.Optional[_t.List['SpellComponent']] = Field(default_factory=list)
    dc: _t.Optional['Int'] = Field(default=None)
    level: _t.Optional['Int'] = Field(default=None)
    modifier: _t.Optional['Int'] = Field(default=None)
    school: _t.Optional['String'] = Field(default=None)
    slots: _t.Optional[_t.List['MonsterSpellSlot']] = Field(default_factory=list)
    spells: _t.Optional[_t.List['MonsterSpell']] = Field(default_factory=list)
    typename__: _t.Literal["MonsterSpellcasting"] = Field(default="MonsterSpellcasting", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        ability = str(self.ability) if self.ability else "None"
        components_required = ', '.join(
            [str(component) for component in self.components_required]) if self.components_required else "None"
        dc = self.dc if self.dc is not None else "None"
        level = self.level if self.level is not None else "None"
        modifier = self.modifier if self.modifier is not None else "None"
        school = self.school if self.school else "None"
        slots = ', '.join([str(slot) for slot in self.slots]) if self.slots else "None"
        spells = ', '.join([str(spell) for spell in self.spells]) if self.spells else "None"

        return (f"Ability: {ability}, Components Required: {components_required}, DC: {dc}, Level: {level}, "
                f"Modifier: {modifier}, School: {school}, Slots: {slots}, Spells: {spells}")


class Multiclassing(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    prerequisite_options: _t.Optional['PrerequisiteChoice'] = Field(default=None)
    prerequisites: _t.Optional[_t.List['AbilityScorePrerequisite']] = Field(default_factory=list)
    proficiencies: _t.Optional[_t.List['Proficiency']] = Field(default_factory=list)
    proficiency_choices: _t.Optional[_t.List['ProficiencyChoice']] = Field(default_factory=list)
    typename__: _t.Literal["Multiclassing"] = Field(default="Multiclassing", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        prerequisite_options = str(self.prerequisite_options) if self.prerequisite_options else "None"
        prerequisites = ', '.join([str(prereq) for prereq in self.prerequisites]) if self.prerequisites else "None"
        proficiencies = ', '.join([str(prof) for prof in self.proficiencies]) if self.proficiencies else "None"
        proficiency_choices = ', '.join(
            [str(choice) for choice in self.proficiency_choices]) if self.proficiency_choices else "None"

        return (f"Prerequisite Options: {prerequisite_options}, Prerequisites: {prerequisites}, "
                f"Proficiencies: {proficiencies}, Proficiency Choices: {proficiency_choices}")


class MultipleActionOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    items: _t.Optional[_t.List['ActionOption']] = Field(default_factory=list)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["MultipleActionOption"] = Field(default="MultipleActionOption", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        items = ', '.join([str(item) for item in self.items]) if self.items else "None"
        option_type = self.option_type if self.option_type else "None"

        return f"{items}"


class Pack(
    IGear,
):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    contents: _t.Optional[_t.List['PackQuantity']] = Field(default_factory=list)
    typename__: _t.Literal["Pack"] = Field(default="Pack", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        base_str = super().__str__()
        contents = ', '.join([str(content) for content in self.contents]) if self.contents else "None"

        return f"{base_str}, Contents: {contents}"


class PackQuantity(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    item: _t.Optional['IEquipment'] = Field(default=None)
    quantity: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["PackQuantity"] = Field(default="PackQuantity", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        item = str(self.item) if self.item else "None"
        quantity = self.quantity if self.quantity is not None else "None"

        return f"Item: {item}, Quantity: {quantity}"


class PaladinSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    aura_range: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["PaladinSpecific"] = Field(default="PaladinSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        aura_range = self.aura_range if self.aura_range is not None else "None"

        return f"Aura Range: {aura_range}"


class PrerequisiteChoice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    from_: _t.Optional['PrerequisiteOptionSet'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["PrerequisiteChoice"] = Field(default="PrerequisiteChoice", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        choose = self.choose if self.choose else "None"
        from_ = str(self.from_) if self.from_ else "None"
        type_str = self.type if self.type else "None"

        return f"Choose: {choose}, From: {from_}, Type: {type_str}"


class PrerequisiteOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    ability_score: _t.Optional['AbilityScore'] = Field(default=None)
    minimum_score: _t.Optional['Int'] = Field(default=None)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["PrerequisiteOption"] = Field(default="PrerequisiteOption", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        ability_score = str(self.ability_score) if self.ability_score else "None"
        minimum_score = self.minimum_score if self.minimum_score is not None else "None"
        option_type = self.option_type if self.option_type else "None"

        return f"Ability Score: {ability_score}, Minimum Score: {minimum_score}, Option Type: {option_type}"


class PrerequisiteOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_set_type: _t.Optional['String'] = Field(default=None)
    options: _t.Optional[_t.List['PrerequisiteOption']] = Field(default_factory=list)
    typename__: _t.Literal["PrerequisiteOptionSet"] = Field(default="PrerequisiteOptionSet", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        option_set_type = self.option_set_type if self.option_set_type else "None"
        options = ', '.join([str(option) for option in self.options]) if self.options else "None"

        return f"Option Set Type: {option_set_type}, Options: {options}"


class Proficiency(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    classes: _t.Optional[_t.List['Class']] = Field(default_factory=list)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    races: _t.Optional[_t.List['ProficiencyRace']] = Field(default_factory=list)
    reference: _t.Optional['ProficiencyReference'] = Field(default=None)
    type: _t.Optional['ProficiencyType'] = Field(default=None)
    typename__: _t.Literal["Proficiency"] = Field(default="Proficiency", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        elements = []
        if self.classes:
            elements.append(f"🏫 Classes: {', '.join(map(str, self.classes))}")
        if self.name:
            elements.append(f"🏷️ Name: {self.name}")
        if self.races:
            elements.append(f"🌿 Races: {', '.join(map(str, self.races))}")
        if self.reference:
            elements.append(f"📖 Reference: {self.reference}")
        if self.type:
            elements.append(f"🔍 Type: {self.type}")

        return '\n'.join(elements)


class ProficiencyChoice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    desc: _t.Optional['String'] = Field(default=None)
    from_: _t.Optional['ProficiencyOptionSet'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["ProficiencyChoice"] = Field(default="ProficiencyChoice", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        elements = []
        if self.choose is not None:
            elements.append(f"🔢 Choose: {self.choose}")
        if self.desc:
            elements.append(f"📜 Description: {self.desc}")
        if self.from_:
            elements.append(f"🔗 From: {self.from_}")
        if self.type:
            elements.append(f"🔍 Type: {self.type}")

        return ', '.join(elements)


class ProficiencyChoiceOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choice: _t.Optional['ProficiencyChoice'] = Field(default=None)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["ProficiencyChoiceOption"] = Field(default="ProficiencyChoiceOption", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        choice = str(self.choice) if self.choice else "None"
        option_type = self.option_type if self.option_type else "None"

        return f"Choice: {choice}, Option Type: {option_type}"


class ProficiencyOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_set_type: _t.Optional['String'] = Field(default=None)
    options: _t.Optional[_t.List['ProficiencyOption']] = Field(default_factory=list)
    typename__: _t.Literal["ProficiencyOptionSet"] = Field(default="ProficiencyOptionSet", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        option_set_type = self.option_set_type if self.option_set_type else "None"
        options = ', '.join([str(option) for option in self.options]) if self.options else "None"

        return f"Option Set Type: {option_set_type}, Options: {options}"


class ProficiencyPrerequisite(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    proficiency: _t.Optional['Proficiency'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["ProficiencyPrerequisite"] = Field(default="ProficiencyPrerequisite", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        proficiency = str(self.proficiency) if self.proficiency else "None"
        type_str = self.type if self.type else "None"

        return f"Proficiency: {proficiency}, Type: {type_str}"


class ProficiencyReferenceOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    item: _t.Optional['Proficiency'] = Field(default=None)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["ProficiencyReferenceOption"] = Field(default="ProficiencyReferenceOption",
                                                                 alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        item = str(self.item) if self.item else "None"
        option_type = self.option_type if self.option_type else "None"

        return f"Item: {item}, Option Type: {option_type}"


class Quantity(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    equipment: _t.Optional['IEquipment'] = Field(default=None)
    quantity: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["Quantity"] = Field(default="Quantity", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        equipment = str(self.equipment) if self.equipment else "None"
        quantity = self.quantity if self.quantity else "None"

        return f"Equipment: {equipment}, Quantity: {quantity}"


class Race(
    ProficiencyRace,
):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    ability_bonus_options: _t.Optional['AbilityBonusChoice'] = Field(default=None)
    age: _t.Optional['String'] = Field(default=None)
    alignment: _t.Optional['String'] = Field(default=None)
    language_desc: _t.Optional['String'] = Field(default=None)
    language_options: _t.Optional['LanguageChoice'] = Field(default=None)
    languages: _t.Optional[_t.List['Language']] = Field(default_factory=list)
    size: _t.Optional['Size'] = Field(default=None)
    size_description: _t.Optional['String'] = Field(default=None)
    speed: _t.Optional['Int'] = Field(default=None)
    starting_proficiencies: _t.Optional[_t.List['Proficiency']] = Field(default_factory=list)
    starting_proficiency_options: _t.Optional['ProficiencyChoice'] = Field(default=None)
    subraces: _t.Optional[_t.List['Subrace']] = Field(default_factory=list)
    traits: _t.Optional[_t.List['Trait']] = Field(default_factory=list)
    typename__: _t.Literal["Race"] = Field(default="Race", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        base_str = super().__str__()
        elements = [base_str]

        if self.ability_bonus_options:
            elements.append(f"💪✨ <b>Ability Bonus Options</b>: {self.ability_bonus_options}")
        if self.age:
            elements.append(f"⏳ <b>Age</b>: {self.age}")
        if self.alignment:
            elements.append(f"⚖️ <b>Alignment</b>: {self.alignment}")
        if self.language_desc:
            elements.append(f"🗣️ <b>Language Description</b>: {self.language_desc}")
        if self.language_options:
            elements.append(f"🔤 <b>Language Options</b>: {self.language_options}")
        if self.languages:
            elements.append(f"🗣️ <b>Languages</b>: {', '.join(map(str, self.languages))}")
        if self.size:
            elements.append(f"📏 <b>Size</b>: {self.size}")
        if self.size_description:
            elements.append(f"📏📜 <b>Size Description</b>: {self.size_description}")
        if self.speed is not None:
            elements.append(f"💨 <b>Speed</b>: {self.speed}")
        if self.starting_proficiencies:
            elements.append(f"🛡️ <b>Starting Proficiencies</b>:\n{'\n'.join(map(str, self.starting_proficiencies))}")
        if self.starting_proficiency_options:
            elements.append(f"🛡️✨ <b>Starting Proficiency Options</b>:\n{self.starting_proficiency_options}")
        if self.subraces:
            elements.append(f"🌿 <b>Subraces</b>:\n{'\n'.join(map(str, self.subraces))}")
        if self.traits:
            elements.append(f"🔮 <b>Traits</b>:\n{'\n'.join(map(str, self.traits))}")

        return '\n'.join(elements)


class Range(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    long: _t.Optional['Int'] = Field(default=None)
    normal: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["Range"] = Field(default="Range", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        long = self.long if self.long is not None else "None"
        normal = self.normal if self.normal is not None else "None"

        return f"Long: {long}, Normal: {normal}"


class RangerSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    favored_enemies: _t.Optional['Int'] = Field(default=None)
    favored_terrain: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["RangerSpecific"] = Field(default="RangerSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        favored_enemies = self.favored_enemies if self.favored_enemies is not None else "None"
        favored_terrain = self.favored_terrain if self.favored_terrain is not None else "None"

        return f"Favored Enemies: {favored_enemies}, Favored Terrain: {favored_terrain}"


class Reaction(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    dc: _t.Optional['ActionDc'] = Field(default=None)
    desc: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["Reaction"] = Field(default="Reaction", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        dc = str(self.dc) if self.dc else "None"
        desc = self.desc if self.desc else "None"
        name = self.name if self.name else "None"

        return f"DC: {dc}, Description: {desc}, Name: {name}"


class RogueSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    sneak_attack: _t.Optional['Dice'] = Field(default=None)
    typename__: _t.Literal["RogueSpecific"] = Field(default="RogueSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        sneak_attack = str(self.sneak_attack) if self.sneak_attack else "None"

        return f"Sneak Attack: {sneak_attack}"


class Rule(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    desc: _t.Optional['String'] = Field(default=None)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    subsections: _t.Optional[_t.List['RuleSection']] = Field(default_factory=list)
    typename__: _t.Literal["Rule"] = Field(default="Rule", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        elements = []
        if self.name:
            elements.append(f"🏷️ *Name*: {self.name}")
        if self.desc:
            # if self.desc.startswith("#"):
            #     desc = self.desc[2:]
            # else:
            #     desc = self.desc
            elements.append(f"📜 *Description*:\n{markdown_to_telegram_markdown(self.desc)}")
        if self.index:
            elements.append(f"🔢 *Index*: {self.index}")
        if self.subsections:
            elements.append(f"📚 *Subsections*:\n{', '.join(map(str, self.subsections))}")

        return '\n'.join(elements)


class RuleSection(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    desc: _t.Optional['String'] = Field(default=None)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["RuleSection"] = Field(default="RuleSection", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        elements = []
        if self.name:
            elements.append(f"🏷️ *Name*: {self.name}")
        if self.desc:
            # desc = markdown_to_html(self.desc)
            # if desc.startswith("#"):
            #     desc = desc[2:]
            elements.append(f"📜 *Description*:\n{markdown_to_telegram_markdown(self.desc)}")
        if self.index:
            elements.append(f"🔢 *Index*: {self.index}")

        return '\n'.join(elements)


class Senses(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    blindsight: _t.Optional['String'] = Field(default=None)
    darkvision: _t.Optional['String'] = Field(default=None)
    passive_perception: _t.Optional['Int'] = Field(default=None)
    tremorsense: _t.Optional['String'] = Field(default=None)
    truesight: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["Senses"] = Field(default="Senses", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        blindsight = self.blindsight if self.blindsight else "None"
        darkvision = self.darkvision if self.darkvision else "None"
        passive_perception = self.passive_perception if self.passive_perception is not None else "None"
        tremorsense = self.tremorsense if self.tremorsense else "None"
        truesight = self.truesight if self.truesight else "None"

        return (f"Blindsight: {blindsight}, Darkvision: {darkvision}, Passive Perception: {passive_perception}, "
                f"Tremorsense: {tremorsense}, Truesight: {truesight}")


class Skill(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    ability_score: _t.Optional['AbilityScore'] = Field(default=None)
    desc: _t.Optional[_t.List['String']] = Field(default_factory=list)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["Skill"] = Field(default="Skill", alias="__typename")

    def __repr__(self):
        """
        Returns a string representation of the instance, useful for debugging.
        Calls the __str__ method.
        """
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        elements = []
        if self.name:
            elements.append(f"🏷️ <b>Name</b>: {self.name}")
        if self.desc:
            elements.append(f"📜 <b>Description</b>: {', '.join(self.desc)}")
        if self.ability_score:
            elements.append(f"📊 <b>Ability Score</b>:\n{self.ability_score}")
        if self.index:
            elements.append(f"🔢 <b>Index</b>: {self.index}")

        return '\n'.join(elements)


class SorcererSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    creating_spell_slots: _t.Optional[_t.List['SpellSlotCreation']] = Field(default_factory=list)
    metamagic_known: _t.Optional['Int'] = Field(default=None)
    sorcery_points: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["SorcererSpecific"] = Field(default="SorcererSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        creating_spell_slots = ', '.join(
            [str(slot) for slot in self.creating_spell_slots]) if self.creating_spell_slots else "None"
        metamagic_known = self.metamagic_known if self.metamagic_known is not None else "None"
        sorcery_points = self.sorcery_points if self.sorcery_points is not None else "None"

        return (f"Creating Spell Slots: {creating_spell_slots}, Metamagic Known: {metamagic_known}, "
                f"Sorcery Points: {sorcery_points}")


class SpecialAbility(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    damage: _t.Optional[_t.List['Damage']] = Field(default_factory=list)
    dc: _t.Optional['ActionDc'] = Field(default=None)
    desc: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    spellcasting: _t.Optional['MonsterSpellcasting'] = Field(default=None)
    usage: _t.Optional['Usage'] = Field(default=None)
    typename__: _t.Literal["SpecialAbility"] = Field(default="SpecialAbility", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        damage = ', '.join([str(d) for d in self.damage]) if self.damage else "None"
        dc = str(self.dc) if self.dc else "None"
        desc = self.desc if self.desc else "None"
        name = self.name if self.name else "None"
        spellcasting = str(self.spellcasting) if self.spellcasting else "None"
        usage = str(self.usage) if self.usage else "None"

        return (f"Damage: {damage}, DC: {dc}, Description: {desc}, Name: {name}, "
                f"Spellcasting: {spellcasting}, Usage: {usage}")


class Speed(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    quantity: _t.Optional['Float'] = Field(default=None)
    unit: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["Speed"] = Field(default="Speed", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        quantity = self.quantity if self.quantity is not None else "None"
        unit = self.unit if self.unit else "None"

        return f"Quantity: {quantity}, Unit: {unit}"


class Spell(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    area_of_effect: _t.Optional['AreaOfEffect'] = Field(default=None)
    attack_type: _t.Optional['SpellAttackType'] = Field(default=None)
    casting_time: _t.Optional['String'] = Field(default=None)
    classes: _t.Optional[_t.List['Class']] = Field(default_factory=list)
    components: _t.Optional[_t.List[_t.Optional['SpellComponent']]] = Field(default_factory=list)
    concentration: _t.Optional['Boolean'] = Field(default=None)
    damage: _t.Optional['SpellDamage'] = Field(default=None)
    dc: _t.Optional['SpellDc'] = Field(default=None)
    desc: _t.Optional[_t.List['String']] = Field(default_factory=list)
    duration: _t.Optional['String'] = Field(default=None)
    heal_at_slot_level: _t.Optional[_t.List['HealingAtLevel']] = Field(default_factory=list)
    higher_level: _t.Optional[_t.List['String']] = Field(default_factory=list)
    index: _t.Optional['String'] = Field(default=None)
    level: _t.Optional['Int'] = Field(default=None)
    material: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    range: _t.Optional['String'] = Field(default=None)
    ritual: _t.Optional['Boolean'] = Field(default=None)
    school: _t.Optional['MagicSchool'] = Field(default=None)
    subclasses: _t.Optional[_t.List['Subclass']] = Field(default_factory=list)
    typename__: _t.Literal["Spell"] = Field(default="Spell", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        elements = []
        if self.name:
            elements.append(f"🏷️ <b>Name:</b> {self.name}")
        if self.desc:
            elements.append(
                f"📜 <b>Description:</b>\n{'\n'.join([markdown_to_html(desc) for desc in self.desc])}\nAt higher levels: {" ".join(self.higher_level)}")
        if self.components:
            elements.append(f"🔮 <b>Components:</b> {', '.join(map(str, self.components))}")
        if self.material:
            elements.append(f"📦 <b>Material:</b> {self.material}")
        if self.concentration is not None:
            elements.append(f"🧠 <b>Concentration:</b> {self.concentration}")
        if self.level is not None:
            elements.append(f"🎚️ <b>Level:</b> {self.level}")
        if self.area_of_effect:
            elements.append(f"🌐 <b>Area of Effect:</b> {self.area_of_effect}")
        if self.range:
            elements.append(f"📏 <b>Range:</b> {self.range}")
        if self.attack_type:
            elements.append(f"⚔️ <b>Attack Type:</b> {self.attack_type}")
        if self.damage:
            elements.append(f"💥 <b>Damage:</b>\n{self.damage}")
        if self.heal_at_slot_level:
            elements.append(f"🩹 <b>Heal at Slot Level:</b> {', '.join(map(str, self.heal_at_slot_level))}")
        if self.casting_time:
            elements.append(f"⏳ <b>Casting Time:</b> {self.casting_time}")
        if self.ritual is not None:
            elements.append(f"🔮 <b>Ritual:</b> {self.ritual}")
        if self.duration:
            elements.append(f"⏲️ <b>Duration:</b> {self.duration}")
        if self.dc:
            elements.append(f"⚖️ <b>DC:</b> {self.dc}")
        if self.classes:
            elements.append(f"🏫 <b>Classes:</b> {', '.join([class_.name for class_ in self.classes])}")
        if self.subclasses:
            elements.append(
                f"📚 <b>Subclasses:</b>\n{', '.join([f"{subclass.name} sottoclasse di {subclass.class_.name}" for subclass in self.subclasses])}")
        if self.index:
            elements.append(f"🔢 <b>Index:</b> {self.index}")
        if self.school:
            elements.append(f"🏫 <b>School:</b> {self.school.name}")

        return '\n'.join(elements)


class SpellChoice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    from_: _t.Optional['SpellOptionSet'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["SpellChoice"] = Field(default="SpellChoice", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        choose = self.choose if self.choose is not None else "None"
        from_ = str(self.from_) if self.from_ else "None"
        type_str = self.type if self.type else "None"

        return f"Choose: {choose}, From: {from_}, Type: {type_str}"


class SpellDamage(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    damage_at_character_level: _t.Optional[_t.List['DamageAtLevel']] = Field(default_factory=list)
    damage_at_slot_level: _t.Optional[_t.List['DamageAtLevel']] = Field(default_factory=list)
    damage_type: _t.Optional['DamageType'] = Field(default=None)
    typename__: _t.Literal["SpellDamage"] = Field(default="SpellDamage", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        elements = []
        if self.damage_at_character_level:
            elements.append(
                f"🎚️ <b>Damage at Character Level:</b>\n{', '.join(map(str, self.damage_at_character_level))}")
        if self.damage_at_slot_level:
            elements.append(f"🔝 <b>Damage at Slot Level:</b>\n{'\n'.join(map(str, self.damage_at_slot_level))}")
        if self.damage_type:
            elements.append(f"💥 <b>Damage Type:</b> {self.damage_type.name}")

        return '\n'.join(elements)


class SpellDc(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    desc: _t.Optional['String'] = Field(default=None)
    success: _t.Optional['DcSuccess'] = Field(default=None)
    type: _t.Optional['AbilityScore'] = Field(default=None)
    typename__: _t.Literal["SpellDc"] = Field(default="SpellDc", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        elements = []
        if self.desc:
            elements.append(f"📜 <b>Description:</b> {self.desc}")
        if self.success:
            elements.append(f"✅ <b>Success:</b> {self.success}")
        if self.type:
            elements.append(f"📊 <b>Type:</b> {self.type.full_name}")

        return '\n'.join(elements)


class SpellOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    item: _t.Optional['Spell'] = Field(default=None)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["SpellOption"] = Field(default="SpellOption", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        item = str(self.item) if self.item else "None"
        option_type = self.option_type if self.option_type else "None"

        return f"Item: {item}, Option Type: {option_type}"


class SpellOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_set_type: _t.Optional['String'] = Field(default=None)
    options: _t.Optional[_t.List['SpellOption']] = Field(default_factory=list)
    typename__: _t.Literal["SpellOptionSet"] = Field(default="SpellOptionSet", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        option_set_type = self.option_set_type if self.option_set_type else "None"
        options = ', '.join([str(option) for option in self.options]) if self.options else "None"

        return f"Option Set Type: {option_set_type}, Options: {options}"


class SpellSlotCreation(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    sorcery_point_cost: _t.Optional['Int'] = Field(default=None)
    spell_slot_level: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["SpellSlotCreation"] = Field(default="SpellSlotCreation", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        sorcery_point_cost = self.sorcery_point_cost if self.sorcery_point_cost is not None else "None"
        spell_slot_level = self.spell_slot_level if self.spell_slot_level is not None else "None"

        return f"Sorcery Point Cost: {sorcery_point_cost}, Spell Slot Level: {spell_slot_level}"


class SpellWithPrerequisite(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    prerequisites: _t.Optional[_t.List[_t.Optional['SpellPrerequisite']]] = Field(default_factory=list)
    spell: _t.Optional['Spell'] = Field(default=None)
    typename__: _t.Literal["SpellWithPrerequisite"] = Field(default="SpellWithPrerequisite", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        prerequisites = ', '.join([str(prereq) for prereq in self.prerequisites]) if self.prerequisites else "None"
        spell = str(self.spell) if self.spell else "None"

        return f"Prerequisites: {prerequisites}, Spell: {spell}"


class SpellcastingInfo(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    desc: _t.Optional[_t.List['String']] = Field(default_factory=list)
    name: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["SpellcastingInfo"] = Field(default="SpellcastingInfo", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        desc = ', '.join(self.desc) if self.desc else "None"
        name = self.name if self.name else "None"

        return f"Description: {desc}, Name: {name}"


class StartingEquipmentChoice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    desc: _t.Optional['String'] = Field(default=None)
    from_: _t.Optional['StartingEquipmentOptionSet'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["StartingEquipmentChoice"] = Field(default="StartingEquipmentChoice", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        choose = self.choose if self.choose is not None else "None"
        desc = self.desc if self.desc else "None"
        from_ = str(self.from_) if self.from_ else "None"
        type_str = self.type if self.type else "None"

        return f"Choose: {choose}, Description: {desc}, From: {from_}, Type: {type_str}"


class StringChoice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    from_: _t.Optional['StringOptionSet'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["StringChoice"] = Field(default="StringChoice", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        choose = self.choose if self.choose else "None"
        from_ = str(self.from_) if self.from_ else "None"
        type_str = self.type if self.type else "None"

        return f"Choose: {choose}, From: {from_}, Type: {type_str}"


class StringOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_type: _t.Optional['String'] = Field(default=None)
    string: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["StringOption"] = Field(default="StringOption", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        option_type = self.option_type if self.option_type else "None"
        string = self.string if self.string else "None"

        return f"Option Type: {option_type}, String: {string}"


class StringOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_set_type: _t.Optional['String'] = Field(default=None)
    options: _t.Optional[_t.List['StringOption']] = Field(default_factory=list)
    typename__: _t.Literal["StringOptionSet"] = Field(default="StringOptionSet", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        option_set_type = self.option_set_type if self.option_set_type else "None"
        options = ', '.join([str(option) for option in self.options]) if self.options else "None"

        return f"Option Set Type: {option_set_type}, Options: {options}"


class Subclass(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    class_: _t.Optional['Class'] = Field(default=None, alias="class")
    desc: _t.Optional[_t.List['String']] = Field(default_factory=list)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    spells: _t.Optional[_t.List['SpellWithPrerequisite']] = Field(default_factory=list)
    subclass_flavor: _t.Optional['String'] = Field(default=None)
    subclass_levels: _t.Optional[_t.List[_t.Optional['Level']]] = Field(default_factory=list)
    typename__: _t.Literal["Subclass"] = Field(default="Subclass", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        class_ = str(self.class_) if self.class_ else "None"
        desc = ', '.join(self.desc) if self.desc else "None"
        index = self.index if self.index else "None"
        name = self.name if self.name else "None"
        spells = ', '.join([str(spell) for spell in self.spells]) if self.spells else "None"
        subclass_flavor = self.subclass_flavor if self.subclass_flavor else "None"
        subclass_levels = ', '.join([str(level) for level in self.subclass_levels]) if self.subclass_levels else "None"

        return (f"Class: {class_}, Description: {desc}, Index: {index}, Name: {name}, "
                f"Spells: {spells}, Subclass Flavor: {subclass_flavor}, Subclass Levels: {subclass_levels}")


class Subrace(ProficiencyRace):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    desc: _t.Optional['String'] = Field(default=None)
    language_options: _t.Optional['LanguageChoice'] = Field(default=None)
    race: _t.Optional['Race'] = Field(default=None)
    racial_traits: _t.Optional[_t.List['Trait']] = Field(default_factory=list)
    starting_proficiencies: _t.Optional[_t.List['Proficiency']] = Field(default_factory=list)
    typename__: _t.Literal["Subrace"] = Field(default="Subrace", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        base_str = super().__str__()
        elements = [base_str]

        if self.desc:
            elements.append(f"📜 Description: {self.desc}")
        if self.language_options:
            elements.append(f"🔤 Language Options: {self.language_options}")
        if self.race:
            elements.append(f"🧝 Race: {self.race}")  # Updated emoji for race
        if self.racial_traits:
            elements.append(f"🌟 Racial Traits:\n{', '.join(map(str, self.racial_traits))}")
        if self.starting_proficiencies:
            elements.append(f"🛡️ Starting Proficiencies: {', '.join(map(str, self.starting_proficiencies))}")

        return '\n'.join(elements)


class Tool(
    IEquipment,
):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    tool_category: _t.Optional['EquipmentCategory'] = Field(default=None)
    typename__: _t.Literal["Tool"] = Field(default="Tool", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        base_str = super().__str__()
        tool_category = str(self.tool_category) if self.tool_category else "None"

        return f"{base_str}, Tool Category: {tool_category}"


class Trait(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    desc: _t.Optional[_t.List['String']] = Field(default_factory=list)
    index: _t.Optional['String'] = Field(default=None)
    language_options: _t.Optional['LanguageChoice'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    parent: _t.Optional['Trait'] = Field(default=None)
    proficiencies: _t.Optional[_t.List['Proficiency']] = Field(default_factory=list)
    proficiency_choices: _t.Optional['ProficiencyChoice'] = Field(default=None)
    races: _t.Optional[_t.List[_t.Optional['Race']]] = Field(default_factory=list)
    subraces: _t.Optional[_t.List['Subrace']] = Field(default_factory=list)
    trait_specific: _t.Optional['TraitSpecific'] = Field(default=None)
    typename__: _t.Literal["Trait"] = Field(default="Trait", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        """
        Returns a human-readable string representation of the instance.
        """
        elements = []
        if self.name:
            elements.append(f"🏷️ {self.name}")
        if self.desc:
            elements.append(f"📜 {', '.join(self.desc)}")
        if self.index:
            elements.append(f"🔢 Index: {self.index}")
        if self.language_options:
            elements.append(f"🔤 Language Options: {self.language_options}")
        if self.parent:
            elements.append(f"👪 Parent: {self.parent}")
        if self.proficiencies:
            elements.append(f"🛡️ Proficiencies: {', '.join(map(str, self.proficiencies))}")
        if self.proficiency_choices:
            elements.append(f"🔍 Proficiency Choices: {self.proficiency_choices}")
        if self.races:
            elements.append(f"🧝 Races: {', '.join(map(str, self.races))}")
        if self.subraces:
            elements.append(f"🌿 Subraces: {', '.join(map(str, self.subraces))}")
        if self.trait_specific:
            elements.append(f"🌟 Trait Specific: {self.trait_specific}")

        return '\n'.join(elements)



class TraitChoice(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    choose: _t.Optional['Int'] = Field(default=None)
    from_: _t.Optional['TraitOptionSet'] = Field(default=None)
    type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["TraitChoice"] = Field(default="TraitChoice", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        choose = self.choose if self.choose is not None else "None"
        from_ = str(self.from_) if self.from_ else "None"
        type_str = self.type if self.type else "None"

        return f"Choose: {choose}, From: {from_}, Type: {type_str}"


class TraitOption(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    item: _t.Optional['Trait'] = Field(default=None)
    option_type: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["TraitOption"] = Field(default="TraitOption", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        item = str(self.item) if self.item else "None"
        option_type = self.option_type if self.option_type else "None"

        return f"Item: {item}, Option Type: {option_type}"


class TraitOptionSet(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    option_set_type: _t.Optional['String'] = Field(default=None)
    options: _t.Optional[_t.List['TraitOption']] = Field(default_factory=list)
    typename__: _t.Literal["TraitOptionSet"] = Field(default="TraitOptionSet", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        option_set_type = self.option_set_type if self.option_set_type else "None"
        options = ', '.join([str(option) for option in self.options]) if self.options else "None"

        return f"Option Set Type: {option_set_type}, Options: {options}"


class TraitSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    breath_weapon: _t.Optional['BreathWeaponTrait'] = Field(default=None)
    damage_type: _t.Optional['DamageType'] = Field(default=None)
    spell_options: _t.Optional['SpellChoice'] = Field(default=None)
    subtrait_options: _t.Optional['TraitChoice'] = Field(default=None)
    typename__: _t.Literal["TraitSpecific"] = Field(default="TraitSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        breath_weapon = str(self.breath_weapon) if self.breath_weapon else "None"
        damage_type = str(self.damage_type) if self.damage_type else "None"
        spell_options = str(self.spell_options) if self.spell_options else "None"
        subtrait_options = str(self.subtrait_options) if self.subtrait_options else "None"

        return (f"Breath Weapon: {breath_weapon}, Damage Type: {damage_type}, Spell Options: {spell_options}, "
                f"Subtrait Options: {subtrait_options}")


class Usage(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    dice: _t.Optional['String'] = Field(default=None)
    min_value: _t.Optional['Int'] = Field(default=None)
    rest_types: _t.Optional[_t.List['RestType']] = Field(default_factory=list)
    times: _t.Optional['Int'] = Field(default=None)
    type: _t.Optional['UsageType'] = Field(default=None)
    typename__: _t.Literal["Usage"] = Field(default="Usage", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        dice = self.dice if self.dice else "None"
        min_value = self.min_value if self.min_value is not None else "None"
        rest_types = ', '.join([str(rest_type) for rest_type in self.rest_types]) if self.rest_types else "None"
        times = self.times if self.times is not None else "None"
        type_str = str(self.type) if self.type else "None"

        return f"Dice: {dice}, Min Value: {min_value}, Rest Types: {rest_types}, Times: {times}, Type: {type_str}"


class Vehicle(
    IEquipment
):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    capacity: _t.Optional['String'] = Field(default=None)
    speed: _t.Optional['Speed'] = Field(default=None)
    vehicle_category: _t.Optional['EquipmentCategory'] = Field(default=None)
    typename__: _t.Literal["Vehicle"] = Field(default="Vehicle", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        base_str = super().__str__()
        capacity = self.capacity if self.capacity else "None"
        speed = str(self.speed) if self.speed else "None"
        vehicle_category = str(self.vehicle_category) if self.vehicle_category else "None"

        return f"{base_str}, Capacity: {capacity}, Speed: {speed}, Vehicle Category: {vehicle_category}"


class WarlockSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    invocations_known: _t.Optional['Int'] = Field(default=None)
    mystic_arcanum_level_6: _t.Optional['Int'] = Field(default=None)
    mystic_arcanum_level_7: _t.Optional['Int'] = Field(default=None)
    mystic_arcanum_level_8: _t.Optional['Int'] = Field(default=None)
    mystic_arcanum_level_9: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["WarlockSpecific"] = Field(default="WarlockSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        invocations_known = self.invocations_known if self.invocations_known is not None else "None"
        mystic_arcanum_level_6 = self.mystic_arcanum_level_6 if self.mystic_arcanum_level_6 is not None else "None"
        mystic_arcanum_level_7 = self.mystic_arcanum_level_7 if self.mystic_arcanum_level_7 is not None else "None"
        mystic_arcanum_level_8 = self.mystic_arcanum_level_8 if self.mystic_arcanum_level_8 is not None else "None"
        mystic_arcanum_level_9 = self.mystic_arcanum_level_9 if self.mystic_arcanum_level_9 is not None else "None"

        return (f"Invocations Known: {invocations_known}, Mystic Arcanum Level 6: {mystic_arcanum_level_6}, "
                f"Mystic Arcanum Level 7: {mystic_arcanum_level_7}, Mystic Arcanum Level 8: {mystic_arcanum_level_8}, "
                f"Mystic Arcanum Level 9: {mystic_arcanum_level_9}")


class Weapon(
    IEquipment
):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    category_range: _t.Optional['EquipmentCategory'] = Field(default=None)
    damage: _t.Optional['Damage'] = Field(default=None)
    properties: _t.Optional[_t.List['WeaponProperty']] = Field(default_factory=list)
    range: _t.Optional['Range'] = Field(default=None)
    special: _t.Optional[_t.List['String']] = Field(default_factory=list)
    throw_range: _t.Optional['Range'] = Field(default=None)
    two_handed_damage: _t.Optional['Damage'] = Field(default=None)
    weapon_category: _t.Optional['EquipmentCategory'] = Field(default=None)
    weapon_range: _t.Optional['WeaponRange'] = Field(default=None)
    typename__: _t.Literal["Weapon"] = Field(default="Weapon", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        base_str = super().__str__()
        category_range = str(self.category_range) if self.category_range else "None"
        damage = str(self.damage) if self.damage else "None"
        properties = ', '.join([str(prop) for prop in self.properties]) if self.properties else "None"
        range_ = str(self.range) if self.range else "None"
        special = ', '.join(self.special) if self.special else "None"
        throw_range = str(self.throw_range) if self.throw_range else "None"
        two_handed_damage = str(self.two_handed_damage) if self.two_handed_damage else "None"
        weapon_category = str(self.weapon_category) if self.weapon_category else "None"
        weapon_range = str(self.weapon_range) if self.weapon_range else "None"

        return (f"{base_str}, Category Range: {category_range}, Damage: {damage}, Properties: {properties}, "
                f"Range: {range_}, Special: {special}, Throw Range: {throw_range}, "
                f"Two-Handed Damage: {two_handed_damage}, Weapon Category: {weapon_category}, Weapon Range: {weapon_range}")


class WeaponProperty(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    desc: _t.Optional[_t.List['String']] = Field(default_factory=list)
    index: _t.Optional['String'] = Field(default=None)
    name: _t.Optional['String'] = Field(default=None)
    typename__: _t.Literal["WeaponProperty"] = Field(default="WeaponProperty", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        elements = []
        if self.name:
            elements.append(f"🏷️ <b>Name:</b> {self.name}")
        if self.desc:
            elements.append(f"📜 <b>Description:</b> {' '.join(self.desc)}")
        if self.index:
            elements.append(f"🔢 <b>Index:</b> {self.index}")

        return '\n'.join(elements)


class WizardSpecific(GraphQLBaseModel):
    """
    An Object type
    See https://graphql.org/learn/schema/#object-types-and-fields
    """
    arcane_recovery_levels: _t.Optional['Int'] = Field(default=None)
    typename__: _t.Literal["WizardSpecific"] = Field(default="WizardSpecific", alias="__typename")

    def __repr__(self):
        return self.__str__()

    def __str__(self):
        arcane_recovery_levels = self.arcane_recovery_levels if self.arcane_recovery_levels is not None else "None"

        return f"Arcane Recovery Levels: {arcane_recovery_levels}"


IEquipmentBase.model_rebuild()
ProficiencyRace.model_rebuild()
IEquipment.model_rebuild()
IGear.model_rebuild()
AbilityBonus.model_rebuild()
AbilityBonusChoice.model_rebuild()
AbilityBonusOption.model_rebuild()
AbilityBonusOptionSet.model_rebuild()
AbilityScore.model_rebuild()
AbilityScorePrerequisite.model_rebuild()
Action.model_rebuild()
ActionDamage.model_rebuild()
ActionDc.model_rebuild()
ActionOption.model_rebuild()
Alignment.model_rebuild()
Ammunition.model_rebuild()
AreaOfEffect.model_rebuild()
Armor.model_rebuild()
ArmorClass.model_rebuild()
Attack.model_rebuild()
Background.model_rebuild()
BackgroundFeature.model_rebuild()
BarbarianSpecific.model_rebuild()
BardSpecific.model_rebuild()
BreathChoice.model_rebuild()
BreathOption.model_rebuild()
BreathOptionSet.model_rebuild()
BreathWeaponDamage.model_rebuild()
BreathWeaponDc.model_rebuild()
BreathWeaponTrait.model_rebuild()
BreathWeaponUsage.model_rebuild()
Class.model_rebuild()
ClassSpellcasting.model_rebuild()
ClericSpecific.model_rebuild()
Condition.model_rebuild()
Cost.model_rebuild()
CountedReferenceOption.model_rebuild()
Damage.model_rebuild()
DamageAtLevel.model_rebuild()
DamageOption.model_rebuild()
DamageOptionSet.model_rebuild()
DamageType.model_rebuild()
DevotionSpecific.model_rebuild()
Dice.model_rebuild()
DruidSpecific.model_rebuild()
EquipmentCategory.model_rebuild()
EquipmentCategoryChoice.model_rebuild()
EquipmentCategoryChoiceOption.model_rebuild()
EquipmentCategoryOptionSet.model_rebuild()
EquipmentMultipleOption.model_rebuild()
EquipmentOptionSet.model_rebuild()
ExpertiseChoice.model_rebuild()
ExpertiseMultipleOption.model_rebuild()
ExpertiseOptionSet.model_rebuild()
Feat.model_rebuild()
Feature.model_rebuild()
FeatureChoice.model_rebuild()
FeatureOption.model_rebuild()
FeatureOptionSet.model_rebuild()
FeaturePrerequisite.model_rebuild()
FeatureSpecific.model_rebuild()
FighterSpecific.model_rebuild()
Gear.model_rebuild()
HealingAtLevel.model_rebuild()
IdealChoice.model_rebuild()
IdealOption.model_rebuild()
IdealOptionSet.model_rebuild()
Language.model_rebuild()
LanguageChoice.model_rebuild()
LanguageOption.model_rebuild()
LanguageOptionSet.model_rebuild()
LegendaryAction.model_rebuild()
Level.model_rebuild()
LevelSpellcasting.model_rebuild()
LoreSpecific.model_rebuild()
MagicItem.model_rebuild()
MagicSchool.model_rebuild()
MonkSpecific.model_rebuild()
Monster.model_rebuild()
MonsterAction.model_rebuild()
MonsterActionChoice.model_rebuild()
MonsterActionOptionSet.model_rebuild()
MonsterArmorClass.model_rebuild()
MonsterProficiency.model_rebuild()
MonsterSpeed.model_rebuild()
MonsterSpell.model_rebuild()
MonsterSpellSlot.model_rebuild()
MonsterSpellcasting.model_rebuild()
Multiclassing.model_rebuild()
MultipleActionOption.model_rebuild()
Pack.model_rebuild()
PackQuantity.model_rebuild()
PaladinSpecific.model_rebuild()
PrerequisiteChoice.model_rebuild()
PrerequisiteOption.model_rebuild()
PrerequisiteOptionSet.model_rebuild()
Proficiency.model_rebuild()
ProficiencyChoice.model_rebuild()
ProficiencyChoiceOption.model_rebuild()
ProficiencyOptionSet.model_rebuild()
ProficiencyPrerequisite.model_rebuild()
ProficiencyReferenceOption.model_rebuild()
Quantity.model_rebuild()
Race.model_rebuild()
Range.model_rebuild()
RangerSpecific.model_rebuild()
Reaction.model_rebuild()
RogueSpecific.model_rebuild()
Rule.model_rebuild()
RuleSection.model_rebuild()
Senses.model_rebuild()
Skill.model_rebuild()
SorcererSpecific.model_rebuild()
SpecialAbility.model_rebuild()
Speed.model_rebuild()
Spell.model_rebuild()
SpellChoice.model_rebuild()
SpellDamage.model_rebuild()
SpellDc.model_rebuild()
SpellOption.model_rebuild()
SpellOptionSet.model_rebuild()
SpellSlotCreation.model_rebuild()
SpellWithPrerequisite.model_rebuild()
SpellcastingInfo.model_rebuild()
StartingEquipmentChoice.model_rebuild()
StringChoice.model_rebuild()
StringOption.model_rebuild()
StringOptionSet.model_rebuild()
Subclass.model_rebuild()
Subrace.model_rebuild()
Tool.model_rebuild()
Trait.model_rebuild()
TraitChoice.model_rebuild()
TraitOption.model_rebuild()
TraitOptionSet.model_rebuild()
TraitSpecific.model_rebuild()
Usage.model_rebuild()
Vehicle.model_rebuild()
WarlockSpecific.model_rebuild()
Weapon.model_rebuild()
WeaponProperty.model_rebuild()
WizardSpecific.model_rebuild()
